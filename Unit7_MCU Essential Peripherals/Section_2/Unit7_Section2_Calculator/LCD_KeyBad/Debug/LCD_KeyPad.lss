
LCD_KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000c38  00000ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800074  00800074  00000ce0  2**0
                  ALLOC
  3 .stab         00000f48  00000000  00000000  00000ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002d8  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00001f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001339  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000737  00000000  00000000  000033f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2a  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  0000475c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  000049ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000970  00000000  00000000  00004e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000577e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 02 	call	0x556	; 0x556 <main>
  8a:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Get_Operands>:

char n1[10]="", n2[10]="",operaton;
int result,num1,num2,flag=0;

void Get_Operands(char keyinput)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	0f 92       	push	r0
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
	
	while(keyinput != 'A' && keyinput != '=' && keyinput != '?')
  9e:	81 34       	cpi	r24, 0x41	; 65
  a0:	81 f5       	brne	.+96     	; 0x102 <Get_Operands+0x70>
  a2:	33 c0       	rjmp	.+102    	; 0x10a <Get_Operands+0x78>
	{
		if (keyinput != '/' && keyinput != '*' && keyinput != '-' && keyinput != '+')
  a4:	8f 32       	cpi	r24, 0x2F	; 47
  a6:	21 f1       	breq	.+72     	; 0xf0 <Get_Operands+0x5e>
  a8:	8a 32       	cpi	r24, 0x2A	; 42
  aa:	11 f1       	breq	.+68     	; 0xf0 <Get_Operands+0x5e>
  ac:	8d 32       	cpi	r24, 0x2D	; 45
  ae:	01 f1       	breq	.+64     	; 0xf0 <Get_Operands+0x5e>
  b0:	8b 32       	cpi	r24, 0x2B	; 43
  b2:	f1 f0       	breq	.+60     	; 0xf0 <Get_Operands+0x5e>
		{
			switch(flag)
  b4:	80 91 74 00 	lds	r24, 0x0074
  b8:	90 91 75 00 	lds	r25, 0x0075
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	21 f0       	breq	.+8      	; 0xc8 <Get_Operands+0x36>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	91 05       	cpc	r25, r1
  c4:	11 f5       	brne	.+68     	; 0x10a <Get_Operands+0x78>
  c6:	0a c0       	rjmp	.+20     	; 0xdc <Get_Operands+0x4a>
			{
				case 0 :
				strncat(n1,&keyinput , 1);
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	be 01       	movw	r22, r28
  ce:	6f 5f       	subi	r22, 0xFF	; 255
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	0e 94 2b 03 	call	0x656	; 0x656 <strncat>
				break;
  da:	17 c0       	rjmp	.+46     	; 0x10a <Get_Operands+0x78>
				case 1 :
				strncat(n2,&keyinput , 1);
  dc:	86 e7       	ldi	r24, 0x76	; 118
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	be 01       	movw	r22, r28
  e2:	6f 5f       	subi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	0e 94 2b 03 	call	0x656	; 0x656 <strncat>
				break;
  ee:	0d c0       	rjmp	.+26     	; 0x10a <Get_Operands+0x78>
			}
		}else
		{
			operaton = keyinput;
  f0:	80 93 8a 00 	sts	0x008A, r24
			flag = 1 ;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 75 00 	sts	0x0075, r25
  fc:	80 93 74 00 	sts	0x0074, r24
 100:	04 c0       	rjmp	.+8      	; 0x10a <Get_Operands+0x78>
int result,num1,num2,flag=0;

void Get_Operands(char keyinput)
{
	
	while(keyinput != 'A' && keyinput != '=' && keyinput != '?')
 102:	8d 33       	cpi	r24, 0x3D	; 61
 104:	11 f0       	breq	.+4      	; 0x10a <Get_Operands+0x78>
 106:	8f 33       	cpi	r24, 0x3F	; 63
 108:	69 f6       	brne	.-102    	; 0xa4 <Get_Operands+0x12>
			operaton = keyinput;
			flag = 1 ;
		}
		break;
	}
}
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <Get_Cacls_Output>:

void Get_Cacls_Output(char* r[20])
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	num1 = atoi(n1);
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 0d 03 	call	0x61a	; 0x61a <atoi>
 120:	90 93 90 00 	sts	0x0090, r25
 124:	80 93 8f 00 	sts	0x008F, r24
	num2 = atoi(n2);
 128:	86 e7       	ldi	r24, 0x76	; 118
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 0d 03 	call	0x61a	; 0x61a <atoi>
 130:	bc 01       	movw	r22, r24
 132:	90 93 8c 00 	sts	0x008C, r25
 136:	80 93 8b 00 	sts	0x008B, r24
	switch(operaton)
 13a:	80 91 8a 00 	lds	r24, 0x008A
 13e:	8b 32       	cpi	r24, 0x2B	; 43
 140:	81 f1       	breq	.+96     	; 0x1a2 <Get_Cacls_Output+0x90>
 142:	8c 32       	cpi	r24, 0x2C	; 44
 144:	18 f4       	brcc	.+6      	; 0x14c <Get_Cacls_Output+0x3a>
 146:	8a 32       	cpi	r24, 0x2A	; 42
 148:	b1 f5       	brne	.+108    	; 0x1b6 <Get_Cacls_Output+0xa4>
 14a:	05 c0       	rjmp	.+10     	; 0x156 <Get_Cacls_Output+0x44>
 14c:	8d 32       	cpi	r24, 0x2D	; 45
 14e:	f1 f0       	breq	.+60     	; 0x18c <Get_Cacls_Output+0x7a>
 150:	8f 32       	cpi	r24, 0x2F	; 47
 152:	89 f5       	brne	.+98     	; 0x1b6 <Get_Cacls_Output+0xa4>
 154:	10 c0       	rjmp	.+32     	; 0x176 <Get_Cacls_Output+0x64>
	{
		case '*':
		result = num1 * num2;
 156:	20 91 8f 00 	lds	r18, 0x008F
 15a:	30 91 90 00 	lds	r19, 0x0090
 15e:	62 9f       	mul	r22, r18
 160:	c0 01       	movw	r24, r0
 162:	63 9f       	mul	r22, r19
 164:	90 0d       	add	r25, r0
 166:	72 9f       	mul	r23, r18
 168:	90 0d       	add	r25, r0
 16a:	11 24       	eor	r1, r1
 16c:	90 93 8e 00 	sts	0x008E, r25
 170:	80 93 8d 00 	sts	0x008D, r24
		break;
 174:	20 c0       	rjmp	.+64     	; 0x1b6 <Get_Cacls_Output+0xa4>
		case '/':
		result = num1 / num2;
 176:	80 91 8f 00 	lds	r24, 0x008F
 17a:	90 91 90 00 	lds	r25, 0x0090
 17e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divmodhi4>
 182:	70 93 8e 00 	sts	0x008E, r23
 186:	60 93 8d 00 	sts	0x008D, r22
		break;
 18a:	15 c0       	rjmp	.+42     	; 0x1b6 <Get_Cacls_Output+0xa4>
		case '-':
		result = num1 - num2;
 18c:	80 91 8f 00 	lds	r24, 0x008F
 190:	90 91 90 00 	lds	r25, 0x0090
 194:	86 1b       	sub	r24, r22
 196:	97 0b       	sbc	r25, r23
 198:	90 93 8e 00 	sts	0x008E, r25
 19c:	80 93 8d 00 	sts	0x008D, r24
		break;
 1a0:	0a c0       	rjmp	.+20     	; 0x1b6 <Get_Cacls_Output+0xa4>
		case '+':
		result = num1 + num2;
 1a2:	80 91 8f 00 	lds	r24, 0x008F
 1a6:	90 91 90 00 	lds	r25, 0x0090
 1aa:	68 0f       	add	r22, r24
 1ac:	79 1f       	adc	r23, r25
 1ae:	70 93 8e 00 	sts	0x008E, r23
 1b2:	60 93 8d 00 	sts	0x008D, r22
		break;
	}
	sprintf(r, "%d", result);
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <Get_Cacls_Output+0xa6>
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <Get_Cacls_Output+0xa8>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <Get_Cacls_Output+0xaa>
 1bc:	ed b7       	in	r30, 0x3d	; 61
 1be:	fe b7       	in	r31, 0x3e	; 62
 1c0:	31 96       	adiw	r30, 0x01	; 1
 1c2:	ad b7       	in	r26, 0x3d	; 61
 1c4:	be b7       	in	r27, 0x3e	; 62
 1c6:	12 96       	adiw	r26, 0x02	; 2
 1c8:	dc 93       	st	X, r29
 1ca:	ce 93       	st	-X, r28
 1cc:	11 97       	sbiw	r26, 0x01	; 1
 1ce:	80 e6       	ldi	r24, 0x60	; 96
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	93 83       	std	Z+3, r25	; 0x03
 1d4:	82 83       	std	Z+2, r24	; 0x02
 1d6:	80 91 8d 00 	lds	r24, 0x008D
 1da:	90 91 8e 00 	lds	r25, 0x008E
 1de:	95 83       	std	Z+5, r25	; 0x05
 1e0:	84 83       	std	Z+4, r24	; 0x04
 1e2:	0e 94 43 03 	call	0x686	; 0x686 <sprintf>
 1e6:	8d b7       	in	r24, 0x3d	; 61
 1e8:	9e b7       	in	r25, 0x3e	; 62
 1ea:	06 96       	adiw	r24, 0x06	; 6
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	9e bf       	out	0x3e, r25	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	8d bf       	out	0x3d, r24	; 61
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <Reset_Operands>:

void Reset_Operands()
{
	flag = 0 ;
 1fc:	10 92 75 00 	sts	0x0075, r1
 200:	10 92 74 00 	sts	0x0074, r1
	strcpy(n1,"");
 204:	10 92 80 00 	sts	0x0080, r1
	strcpy(n2,"");	
 208:	10 92 76 00 	sts	0x0076, r1
}
 20c:	08 95       	ret

0000020e <Keypad_Init>:

void Keypad_Init()
{
	//set upper part of keypad port as input
	//KeypadDDR &=~(0x0F);
	KeypadDDR &=~((1<<R0)|(1<<R1)|(1<<R2)|(1<<R3));
 20e:	81 b3       	in	r24, 0x11	; 17
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	81 bb       	out	0x11, r24	; 17
	//set lower part of keypad port as output
	//KeypadDDR |=(0xF0);
	KeypadDDR |=((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));
 214:	81 b3       	in	r24, 0x11	; 17
 216:	80 6f       	ori	r24, 0xF0	; 240
 218:	81 bb       	out	0x11, r24	; 17
	
	KeypadPORT = 0xFF ;   //set Keypad Port as pull up
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	82 bb       	out	0x12, r24	; 18
}
 21e:	08 95       	ret

00000220 <Keypad_Getkey>:

char Keypad_Getkey()
{
 220:	6f 92       	push	r6
 222:	7f 92       	push	r7
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
				}
			}
			
		}
	}
	return 'A';	//Return 'A' if no key is pressed
 23c:	03 e6       	ldi	r16, 0x63	; 99
 23e:	10 e0       	ldi	r17, 0x00	; 0
}

char Keypad_Getkey()
{
	int i,j;
	for(i=0; i<4; i++)
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d0 e0       	ldi	r29, 0x00	; 0
	{
		KeypadPORT |=((1<<KeypadCol[0])|(1<<KeypadCol[1])|(1<<KeypadCol[2])|(1<<KeypadCol[3])) ;
 244:	d8 01       	movw	r26, r16
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	ee 24       	eor	r14, r14
 24c:	ff 24       	eor	r15, r15
 24e:	68 94       	set
 250:	e1 f8       	bld	r14, 1
 252:	e0 0e       	add	r14, r16
 254:	f1 1e       	adc	r15, r17
 256:	cc 24       	eor	r12, r12
 258:	dd 24       	eor	r13, r13
 25a:	68 94       	set
 25c:	c2 f8       	bld	r12, 2
 25e:	c0 0e       	add	r12, r16
 260:	d1 1e       	adc	r13, r17
 262:	0f 2e       	mov	r0, r31
 264:	f6 e0       	ldi	r31, 0x06	; 6
 266:	af 2e       	mov	r10, r31
 268:	bb 24       	eor	r11, r11
 26a:	f0 2d       	mov	r31, r0
 26c:	a0 0e       	add	r10, r16
 26e:	b1 1e       	adc	r11, r17
		KeypadPORT &=~(1<<KeypadCol[i]); //send low to the next coulomb to check which intersect is pushed
 270:	0f 2e       	mov	r0, r31
 272:	fb e6       	ldi	r31, 0x6B	; 107
 274:	8f 2e       	mov	r8, r31
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	9f 2e       	mov	r9, r31
 27a:	f0 2d       	mov	r31, r0
		
		for(j=0; j<4; j++)
 27c:	66 24       	eor	r6, r6
 27e:	77 24       	eor	r7, r7
char Keypad_Getkey()
{
	int i,j;
	for(i=0; i<4; i++)
	{
		KeypadPORT |=((1<<KeypadCol[0])|(1<<KeypadCol[1])|(1<<KeypadCol[2])|(1<<KeypadCol[3])) ;
 280:	92 b3       	in	r25, 0x12	; 18
 282:	9b 01       	movw	r18, r22
 284:	0c 90       	ld	r0, X
 286:	02 c0       	rjmp	.+4      	; 0x28c <Keypad_Getkey+0x6c>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <Keypad_Getkey+0x68>
 290:	ab 01       	movw	r20, r22
 292:	f7 01       	movw	r30, r14
 294:	00 80       	ld	r0, Z
 296:	02 c0       	rjmp	.+4      	; 0x29c <Keypad_Getkey+0x7c>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <Keypad_Getkey+0x78>
 2a0:	24 2b       	or	r18, r20
 2a2:	29 2b       	or	r18, r25
 2a4:	cb 01       	movw	r24, r22
 2a6:	f6 01       	movw	r30, r12
 2a8:	00 80       	ld	r0, Z
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <Keypad_Getkey+0x90>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <Keypad_Getkey+0x8c>
 2b4:	82 2b       	or	r24, r18
 2b6:	9b 01       	movw	r18, r22
 2b8:	f5 01       	movw	r30, r10
 2ba:	00 80       	ld	r0, Z
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Keypad_Getkey+0xa2>
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <Keypad_Getkey+0x9e>
 2c6:	82 2b       	or	r24, r18
 2c8:	82 bb       	out	0x12, r24	; 18
		KeypadPORT &=~(1<<KeypadCol[i]); //send low to the next coulomb to check which intersect is pushed
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	f8 01       	movw	r30, r16
 2ce:	80 81       	ld	r24, Z
 2d0:	0e 5f       	subi	r16, 0xFE	; 254
 2d2:	1f 4f       	sbci	r17, 0xFF	; 255
 2d4:	ab 01       	movw	r20, r22
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <Keypad_Getkey+0xbc>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	8a 95       	dec	r24
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <Keypad_Getkey+0xb8>
 2e0:	ca 01       	movw	r24, r20
 2e2:	80 95       	com	r24
 2e4:	28 23       	and	r18, r24
 2e6:	22 bb       	out	0x12, r18	; 18
 2e8:	f4 01       	movw	r30, r8
		
		for(j=0; j<4; j++)
 2ea:	a3 01       	movw	r20, r6
		{
			if(!(KeypadPIN & (1<<KeypadRow[j]))) //check if key is pressed
 2ec:	80 b3       	in	r24, 0x10	; 16
 2ee:	20 81       	ld	r18, Z
 2f0:	32 96       	adiw	r30, 0x02	; 2
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 2e       	mov	r0, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <Keypad_Getkey+0xdc>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <Keypad_Getkey+0xd8>
 300:	80 fd       	sbrc	r24, 0
 302:	50 c0       	rjmp	.+160    	; 0x3a4 <Keypad_Getkey+0x184>
 304:	cb 01       	movw	r24, r22
 306:	02 c0       	rjmp	.+4      	; 0x30c <Keypad_Getkey+0xec>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	2a 95       	dec	r18
 30e:	e2 f7       	brpl	.-8      	; 0x308 <Keypad_Getkey+0xe8>
 310:	9c 01       	movw	r18, r24
			{
				while(!(KeypadPIN & (1<<KeypadRow[j])));
 312:	80 b3       	in	r24, 0x10	; 16
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	d1 f3       	breq	.-12     	; 0x312 <Keypad_Getkey+0xf2>
				switch(i)
 31e:	c1 30       	cpi	r28, 0x01	; 1
 320:	d1 05       	cpc	r29, r1
 322:	d1 f0       	breq	.+52     	; 0x358 <Keypad_Getkey+0x138>
 324:	c2 30       	cpi	r28, 0x02	; 2
 326:	d1 05       	cpc	r29, r1
 328:	1c f4       	brge	.+6      	; 0x330 <Keypad_Getkey+0x110>
 32a:	20 97       	sbiw	r28, 0x00	; 0
 32c:	41 f0       	breq	.+16     	; 0x33e <Keypad_Getkey+0x11e>
 32e:	3a c0       	rjmp	.+116    	; 0x3a4 <Keypad_Getkey+0x184>
 330:	c2 30       	cpi	r28, 0x02	; 2
 332:	d1 05       	cpc	r29, r1
 334:	f1 f0       	breq	.+60     	; 0x372 <Keypad_Getkey+0x152>
 336:	c3 30       	cpi	r28, 0x03	; 3
 338:	d1 05       	cpc	r29, r1
 33a:	a1 f5       	brne	.+104    	; 0x3a4 <Keypad_Getkey+0x184>
 33c:	27 c0       	rjmp	.+78     	; 0x38c <Keypad_Getkey+0x16c>
				{
					case 0 :
					{
						if (j == 0) return '7';
 33e:	41 15       	cp	r20, r1
 340:	51 05       	cpc	r21, r1
 342:	e9 f1       	breq	.+122    	; 0x3be <Keypad_Getkey+0x19e>
						else if (j == 1) return '4';
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	51 05       	cpc	r21, r1
 348:	e1 f1       	breq	.+120    	; 0x3c2 <Keypad_Getkey+0x1a2>
						else if (j == 2) return '1';
 34a:	42 30       	cpi	r20, 0x02	; 2
 34c:	51 05       	cpc	r21, r1
 34e:	d9 f1       	breq	.+118    	; 0x3c6 <Keypad_Getkey+0x1a6>
						else if (j == 3) return '?';
 350:	43 30       	cpi	r20, 0x03	; 3
 352:	51 05       	cpc	r21, r1
 354:	39 f5       	brne	.+78     	; 0x3a4 <Keypad_Getkey+0x184>
 356:	39 c0       	rjmp	.+114    	; 0x3ca <Keypad_Getkey+0x1aa>
						break;
					}
					case 1 :
					{
						if (j == 0) return '8';
 358:	41 15       	cp	r20, r1
 35a:	51 05       	cpc	r21, r1
 35c:	c1 f1       	breq	.+112    	; 0x3ce <Keypad_Getkey+0x1ae>
						else if (j == 1) return '5';
 35e:	41 30       	cpi	r20, 0x01	; 1
 360:	51 05       	cpc	r21, r1
 362:	b9 f1       	breq	.+110    	; 0x3d2 <Keypad_Getkey+0x1b2>
						else if (j == 2) return '2';
 364:	42 30       	cpi	r20, 0x02	; 2
 366:	51 05       	cpc	r21, r1
 368:	b1 f1       	breq	.+108    	; 0x3d6 <Keypad_Getkey+0x1b6>
						else if (j == 3) return '0';
 36a:	43 30       	cpi	r20, 0x03	; 3
 36c:	51 05       	cpc	r21, r1
 36e:	d1 f4       	brne	.+52     	; 0x3a4 <Keypad_Getkey+0x184>
 370:	34 c0       	rjmp	.+104    	; 0x3da <Keypad_Getkey+0x1ba>
						break;
					}
					case 2 :
					{
						if (j == 0) return '9';
 372:	41 15       	cp	r20, r1
 374:	51 05       	cpc	r21, r1
 376:	99 f1       	breq	.+102    	; 0x3de <Keypad_Getkey+0x1be>
						else if (j == 1) return '6';
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	51 05       	cpc	r21, r1
 37c:	91 f1       	breq	.+100    	; 0x3e2 <Keypad_Getkey+0x1c2>
						else if (j == 2) return '3';
 37e:	42 30       	cpi	r20, 0x02	; 2
 380:	51 05       	cpc	r21, r1
 382:	89 f1       	breq	.+98     	; 0x3e6 <Keypad_Getkey+0x1c6>
						else if (j == 3) return '=';
 384:	43 30       	cpi	r20, 0x03	; 3
 386:	51 05       	cpc	r21, r1
 388:	69 f4       	brne	.+26     	; 0x3a4 <Keypad_Getkey+0x184>
 38a:	2f c0       	rjmp	.+94     	; 0x3ea <Keypad_Getkey+0x1ca>
						break;
					}
					case 3 :
					{
						if (j == 0) return '/';
 38c:	41 15       	cp	r20, r1
 38e:	51 05       	cpc	r21, r1
 390:	71 f1       	breq	.+92     	; 0x3ee <Keypad_Getkey+0x1ce>
						else if (j == 1) return '*';
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	51 05       	cpc	r21, r1
 396:	69 f1       	breq	.+90     	; 0x3f2 <Keypad_Getkey+0x1d2>
						else if (j == 2) return '-';
 398:	42 30       	cpi	r20, 0x02	; 2
 39a:	51 05       	cpc	r21, r1
 39c:	61 f1       	breq	.+88     	; 0x3f6 <Keypad_Getkey+0x1d6>
						else if (j == 3) return '+';
 39e:	43 30       	cpi	r20, 0x03	; 3
 3a0:	51 05       	cpc	r21, r1
 3a2:	59 f1       	breq	.+86     	; 0x3fa <Keypad_Getkey+0x1da>
	for(i=0; i<4; i++)
	{
		KeypadPORT |=((1<<KeypadCol[0])|(1<<KeypadCol[1])|(1<<KeypadCol[2])|(1<<KeypadCol[3])) ;
		KeypadPORT &=~(1<<KeypadCol[i]); //send low to the next coulomb to check which intersect is pushed
		
		for(j=0; j<4; j++)
 3a4:	4f 5f       	subi	r20, 0xFF	; 255
 3a6:	5f 4f       	sbci	r21, 0xFF	; 255
 3a8:	44 30       	cpi	r20, 0x04	; 4
 3aa:	51 05       	cpc	r21, r1
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <Keypad_Getkey+0x190>
 3ae:	9e cf       	rjmp	.-196    	; 0x2ec <Keypad_Getkey+0xcc>
}

char Keypad_Getkey()
{
	int i,j;
	for(i=0; i<4; i++)
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	c4 30       	cpi	r28, 0x04	; 4
 3b4:	d1 05       	cpc	r29, r1
 3b6:	09 f0       	breq	.+2      	; 0x3ba <Keypad_Getkey+0x19a>
 3b8:	63 cf       	rjmp	.-314    	; 0x280 <Keypad_Getkey+0x60>
				}
			}
			
		}
	}
	return 'A';	//Return 'A' if no key is pressed
 3ba:	81 e4       	ldi	r24, 0x41	; 65
 3bc:	1f c0       	rjmp	.+62     	; 0x3fc <Keypad_Getkey+0x1dc>
				while(!(KeypadPIN & (1<<KeypadRow[j])));
				switch(i)
				{
					case 0 :
					{
						if (j == 0) return '7';
 3be:	87 e3       	ldi	r24, 0x37	; 55
 3c0:	1d c0       	rjmp	.+58     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 1) return '4';
 3c2:	84 e3       	ldi	r24, 0x34	; 52
 3c4:	1b c0       	rjmp	.+54     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 2) return '1';
 3c6:	81 e3       	ldi	r24, 0x31	; 49
 3c8:	19 c0       	rjmp	.+50     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 3) return '?';
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	17 c0       	rjmp	.+46     	; 0x3fc <Keypad_Getkey+0x1dc>
						break;
					}
					case 1 :
					{
						if (j == 0) return '8';
 3ce:	88 e3       	ldi	r24, 0x38	; 56
 3d0:	15 c0       	rjmp	.+42     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 1) return '5';
 3d2:	85 e3       	ldi	r24, 0x35	; 53
 3d4:	13 c0       	rjmp	.+38     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 2) return '2';
 3d6:	82 e3       	ldi	r24, 0x32	; 50
 3d8:	11 c0       	rjmp	.+34     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 3) return '0';
 3da:	80 e3       	ldi	r24, 0x30	; 48
 3dc:	0f c0       	rjmp	.+30     	; 0x3fc <Keypad_Getkey+0x1dc>
						break;
					}
					case 2 :
					{
						if (j == 0) return '9';
 3de:	89 e3       	ldi	r24, 0x39	; 57
 3e0:	0d c0       	rjmp	.+26     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 1) return '6';
 3e2:	86 e3       	ldi	r24, 0x36	; 54
 3e4:	0b c0       	rjmp	.+22     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 2) return '3';
 3e6:	83 e3       	ldi	r24, 0x33	; 51
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 3) return '=';
 3ea:	8d e3       	ldi	r24, 0x3D	; 61
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <Keypad_Getkey+0x1dc>
						break;
					}
					case 3 :
					{
						if (j == 0) return '/';
 3ee:	8f e2       	ldi	r24, 0x2F	; 47
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 1) return '*';
 3f2:	8a e2       	ldi	r24, 0x2A	; 42
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 2) return '-';
 3f6:	8d e2       	ldi	r24, 0x2D	; 45
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <Keypad_Getkey+0x1dc>
						else if (j == 3) return '+';
 3fa:	8b e2       	ldi	r24, 0x2B	; 43
			}
			
		}
	}
	return 'A';	//Return 'A' if no key is pressed
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	bf 90       	pop	r11
 40e:	af 90       	pop	r10
 410:	9f 90       	pop	r9
 412:	8f 90       	pop	r8
 414:	7f 90       	pop	r7
 416:	6f 90       	pop	r6
 418:	08 95       	ret

0000041a <LCD_lcd_kick>:
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick()
{
	LCD_CTRL |= (1 << EN_SWITCH);
 41a:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	83 ed       	ldi	r24, 0xD3	; 211
 41e:	90 e3       	ldi	r25, 0x30	; 48
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <LCD_lcd_kick+0x6>
 424:	00 c0       	rjmp	.+0      	; 0x426 <LCD_lcd_kick+0xc>
 426:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
 428:	c3 98       	cbi	0x18, 3	; 24
}
 42a:	08 95       	ret

0000042c <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy()
{
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
 42c:	8a b3       	in	r24, 0x1a	; 26
 42e:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
 430:	c2 9a       	sbi	0x18, 2	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
 432:	c1 98       	cbi	0x18, 1	; 24
	LCD_lcd_kick();
 434:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
 438:	8a b3       	in	r24, 0x1a	; 26
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
 43e:	c2 98       	cbi	0x18, 2	; 24
	
}
 440:	08 95       	ret

00000442 <LCD_WRITE_COMMAND>:
		}
	}
}

void LCD_WRITE_COMMAND(unsigned char command)
{
 442:	cf 93       	push	r28
 444:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 446:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_check_lcd_isbusy>
		LCD_PORT = command;
 44a:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
 44c:	88 b3       	in	r24, 0x18	; 24
 44e:	89 7f       	andi	r24, 0xF9	; 249
 450:	88 bb       	out	0x18, r24	; 24
 452:	89 ef       	ldi	r24, 0xF9	; 249
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <LCD_WRITE_COMMAND+0x14>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <LCD_WRITE_COMMAND+0x1a>
 45c:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
 45e:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <LCD_GOTO_XY>:
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
	if (line == 1)
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	39 f4       	brne	.+14     	; 0x478 <LCD_GOTO_XY+0x12>
	{
		if (position < 16 && position >= 0)
 46a:	60 31       	cpi	r22, 0x10	; 16
 46c:	68 f4       	brcc	.+26     	; 0x488 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 46e:	86 2f       	mov	r24, r22
 470:	80 58       	subi	r24, 0x80	; 128
 472:	0e 94 21 02 	call	0x442	; 0x442 <LCD_WRITE_COMMAND>
 476:	08 95       	ret
		}
	}
	if (line == 2)
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	31 f4       	brne	.+12     	; 0x488 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
 47c:	60 31       	cpi	r22, 0x10	; 16
 47e:	20 f4       	brcc	.+8      	; 0x488 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 480:	86 2f       	mov	r24, r22
 482:	80 54       	subi	r24, 0x40	; 64
 484:	0e 94 21 02 	call	0x442	; 0x442 <LCD_WRITE_COMMAND>
 488:	08 95       	ret

0000048a <LCD_clear_screen>:
 */ 
#include "lcd.h"

void LCD_clear_screen()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 21 02 	call	0x442	; 0x442 <LCD_WRITE_COMMAND>
}
 490:	08 95       	ret

00000492 <LCD_INIT>:
 492:	87 e8       	ldi	r24, 0x87	; 135
 494:	93 e1       	ldi	r25, 0x13	; 19
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_INIT+0x4>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_INIT+0xa>
 49c:	00 00       	nop

void LCD_INIT()
{
	
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 49e:	87 b3       	in	r24, 0x17	; 23
 4a0:	8e 60       	ori	r24, 0x0E	; 14
 4a2:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 4a4:	88 b3       	in	r24, 0x18	; 24
 4a6:	81 7f       	andi	r24, 0xF1	; 241
 4a8:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	8a bb       	out	0x1a, r24	; 26
 4ae:	85 ea       	ldi	r24, 0xA5	; 165
 4b0:	9e e0       	ldi	r25, 0x0E	; 14
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_INIT+0x20>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_INIT+0x26>
 4b8:	00 00       	nop
	_delay_ms(15);
	
	LCD_clear_screen();
 4ba:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_clear_screen>
	
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 4be:	88 e3       	ldi	r24, 0x38	; 56
 4c0:	0e 94 21 02 	call	0x442	; 0x442 <LCD_WRITE_COMMAND>
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 4c4:	86 e0       	ldi	r24, 0x06	; 6
 4c6:	0e 94 21 02 	call	0x442	; 0x442 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	0e 94 21 02 	call	0x442	; 0x442 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 4d0:	8f e0       	ldi	r24, 0x0F	; 15
 4d2:	0e 94 21 02 	call	0x442	; 0x442 <LCD_WRITE_COMMAND>
}
 4d6:	08 95       	ret

000004d8 <LCD_WRITE_CHAR>:
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character)
{
 4d8:	cf 93       	push	r28
 4da:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 4dc:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_check_lcd_isbusy>
		LCD_PORT = character;
 4e0:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~(1 << RW_SWITCH);
 4e2:	c2 98       	cbi	0x18, 2	; 24
		LCD_CTRL |= (1 << RS_SWITCH);
 4e4:	c1 9a       	sbi	0x18, 1	; 24
 4e6:	89 ef       	ldi	r24, 0xF9	; 249
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_WRITE_CHAR+0x12>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_WRITE_CHAR+0x18>
 4f0:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
 4f2:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
	int count = 0;
 506:	08 2f       	mov	r16, r24
 508:	19 2f       	mov	r17, r25
 50a:	c0 e0       	ldi	r28, 0x00	; 0
 50c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if (count == 32)
		{
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
 50e:	ee 24       	eor	r14, r14
 510:	ff 24       	eor	r15, r15
}

void LCD_WRITE_STRING(char* string)
{
	int count = 0;
	while (*string > 0)
 512:	15 c0       	rjmp	.+42     	; 0x53e <LCD_WRITE_STRING+0x44>
	{
		count++;
 514:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 516:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_WRITE_CHAR>
		if (count == 16)
 51a:	c0 31       	cpi	r28, 0x10	; 16
 51c:	d1 05       	cpc	r29, r1
 51e:	29 f4       	brne	.+10     	; 0x52a <LCD_WRITE_STRING+0x30>
		{
			LCD_GOTO_XY(2,0);
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	0e 94 33 02 	call	0x466	; 0x466 <LCD_GOTO_XY>
 528:	0a c0       	rjmp	.+20     	; 0x53e <LCD_WRITE_STRING+0x44>
		}
		else if (count == 32)
 52a:	c0 32       	cpi	r28, 0x20	; 32
 52c:	d1 05       	cpc	r29, r1
 52e:	39 f4       	brne	.+14     	; 0x53e <LCD_WRITE_STRING+0x44>
		{
			LCD_clear_screen();
 530:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	0e 94 33 02 	call	0x466	; 0x466 <LCD_GOTO_XY>
			count = 0;
 53c:	e7 01       	movw	r28, r14
}

void LCD_WRITE_STRING(char* string)
{
	int count = 0;
	while (*string > 0)
 53e:	f8 01       	movw	r30, r16
 540:	81 91       	ld	r24, Z+
 542:	8f 01       	movw	r16, r30
 544:	88 23       	and	r24, r24
 546:	31 f7       	brne	.-52     	; 0x514 <LCD_WRITE_STRING+0x1a>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	08 95       	ret

00000556 <main>:
#include "calculator.h"
#include "string.h"


int main(void)
{
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	64 97       	sbiw	r28, 0x14	; 20
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	de bf       	out	0x3e, r29	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	cd bf       	out	0x3d, r28	; 61
	LCD_INIT();
 56a:	0e 94 49 02 	call	0x492	; 0x492 <LCD_INIT>
	Keypad_Init();
 56e:	0e 94 07 01 	call	0x20e	; 0x20e <Keypad_Init>
	char keyinput,StrResult[20]="";
 572:	19 82       	std	Y+1, r1	; 0x01
 574:	1a 82       	std	Y+2, r1	; 0x02
 576:	1b 82       	std	Y+3, r1	; 0x03
 578:	1c 82       	std	Y+4, r1	; 0x04
 57a:	fe 01       	movw	r30, r28
 57c:	35 96       	adiw	r30, 0x05	; 5
 57e:	80 e1       	ldi	r24, 0x10	; 16
 580:	df 01       	movw	r26, r30
 582:	1d 92       	st	X+, r1
 584:	8a 95       	dec	r24
 586:	e9 f7       	brne	.-6      	; 0x582 <main+0x2c>
    while(1)
    {
		keyinput = Keypad_Getkey();
 588:	0e 94 10 01 	call	0x220	; 0x220 <Keypad_Getkey>
 58c:	18 2f       	mov	r17, r24
		Get_Operands(keyinput);
 58e:	0e 94 49 00 	call	0x92	; 0x92 <Get_Operands>
		
		switch(keyinput)
 592:	1f 33       	cpi	r17, 0x3F	; 63
 594:	29 f0       	breq	.+10     	; 0x5a0 <main+0x4a>
 596:	11 34       	cpi	r17, 0x41	; 65
 598:	b9 f3       	breq	.-18     	; 0x588 <main+0x32>
 59a:	1d 33       	cpi	r17, 0x3D	; 61
 59c:	99 f4       	brne	.+38     	; 0x5c4 <main+0x6e>
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <main+0x50>
		{
			case 'A':
				break;
			case '?':
				LCD_clear_screen();
 5a0:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_clear_screen>
				break;
 5a4:	f1 cf       	rjmp	.-30     	; 0x588 <main+0x32>
			case '=' :
				LCD_WRITE_CHAR(keyinput);
 5a6:	8d e3       	ldi	r24, 0x3D	; 61
 5a8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_WRITE_CHAR>
				Get_Cacls_Output(StrResult);
 5ac:	ce 01       	movw	r24, r28
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	0e 94 89 00 	call	0x112	; 0x112 <Get_Cacls_Output>
				LCD_WRITE_STRING(StrResult);
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_WRITE_STRING>
				Reset_Operands();
 5bc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Reset_Operands>
				strcpy(StrResult,"");
 5c0:	19 82       	std	Y+1, r1	; 0x01
				break;
 5c2:	e2 cf       	rjmp	.-60     	; 0x588 <main+0x32>
			default:
				LCD_WRITE_CHAR(keyinput);
 5c4:	81 2f       	mov	r24, r17
 5c6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_WRITE_CHAR>
 5ca:	de cf       	rjmp	.-68     	; 0x588 <main+0x32>

000005cc <__divmodhi4>:
 5cc:	97 fb       	bst	r25, 7
 5ce:	09 2e       	mov	r0, r25
 5d0:	07 26       	eor	r0, r23
 5d2:	0a d0       	rcall	.+20     	; 0x5e8 <__divmodhi4_neg1>
 5d4:	77 fd       	sbrc	r23, 7
 5d6:	04 d0       	rcall	.+8      	; 0x5e0 <__divmodhi4_neg2>
 5d8:	0c d0       	rcall	.+24     	; 0x5f2 <__udivmodhi4>
 5da:	06 d0       	rcall	.+12     	; 0x5e8 <__divmodhi4_neg1>
 5dc:	00 20       	and	r0, r0
 5de:	1a f4       	brpl	.+6      	; 0x5e6 <__divmodhi4_exit>

000005e0 <__divmodhi4_neg2>:
 5e0:	70 95       	com	r23
 5e2:	61 95       	neg	r22
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255

000005e6 <__divmodhi4_exit>:
 5e6:	08 95       	ret

000005e8 <__divmodhi4_neg1>:
 5e8:	f6 f7       	brtc	.-4      	; 0x5e6 <__divmodhi4_exit>
 5ea:	90 95       	com	r25
 5ec:	81 95       	neg	r24
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <__udivmodhi4>:
 5f2:	aa 1b       	sub	r26, r26
 5f4:	bb 1b       	sub	r27, r27
 5f6:	51 e1       	ldi	r21, 0x11	; 17
 5f8:	07 c0       	rjmp	.+14     	; 0x608 <__udivmodhi4_ep>

000005fa <__udivmodhi4_loop>:
 5fa:	aa 1f       	adc	r26, r26
 5fc:	bb 1f       	adc	r27, r27
 5fe:	a6 17       	cp	r26, r22
 600:	b7 07       	cpc	r27, r23
 602:	10 f0       	brcs	.+4      	; 0x608 <__udivmodhi4_ep>
 604:	a6 1b       	sub	r26, r22
 606:	b7 0b       	sbc	r27, r23

00000608 <__udivmodhi4_ep>:
 608:	88 1f       	adc	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	5a 95       	dec	r21
 60e:	a9 f7       	brne	.-22     	; 0x5fa <__udivmodhi4_loop>
 610:	80 95       	com	r24
 612:	90 95       	com	r25
 614:	bc 01       	movw	r22, r24
 616:	cd 01       	movw	r24, r26
 618:	08 95       	ret

0000061a <atoi>:
 61a:	fc 01       	movw	r30, r24
 61c:	88 27       	eor	r24, r24
 61e:	99 27       	eor	r25, r25
 620:	e8 94       	clt
 622:	21 91       	ld	r18, Z+
 624:	20 32       	cpi	r18, 0x20	; 32
 626:	e9 f3       	breq	.-6      	; 0x622 <atoi+0x8>
 628:	29 30       	cpi	r18, 0x09	; 9
 62a:	10 f0       	brcs	.+4      	; 0x630 <atoi+0x16>
 62c:	2e 30       	cpi	r18, 0x0E	; 14
 62e:	c8 f3       	brcs	.-14     	; 0x622 <atoi+0x8>
 630:	2b 32       	cpi	r18, 0x2B	; 43
 632:	41 f0       	breq	.+16     	; 0x644 <atoi+0x2a>
 634:	2d 32       	cpi	r18, 0x2D	; 45
 636:	39 f4       	brne	.+14     	; 0x646 <atoi+0x2c>
 638:	68 94       	set
 63a:	04 c0       	rjmp	.+8      	; 0x644 <atoi+0x2a>
 63c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulhi_const_10>
 640:	82 0f       	add	r24, r18
 642:	91 1d       	adc	r25, r1
 644:	21 91       	ld	r18, Z+
 646:	20 53       	subi	r18, 0x30	; 48
 648:	2a 30       	cpi	r18, 0x0A	; 10
 64a:	c0 f3       	brcs	.-16     	; 0x63c <atoi+0x22>
 64c:	1e f4       	brtc	.+6      	; 0x654 <atoi+0x3a>
 64e:	90 95       	com	r25
 650:	81 95       	neg	r24
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	08 95       	ret

00000656 <strncat>:
 656:	fb 01       	movw	r30, r22
 658:	dc 01       	movw	r26, r24
 65a:	0d 90       	ld	r0, X+
 65c:	00 20       	and	r0, r0
 65e:	e9 f7       	brne	.-6      	; 0x65a <strncat+0x4>
 660:	11 97       	sbiw	r26, 0x01	; 1
 662:	41 50       	subi	r20, 0x01	; 1
 664:	50 40       	sbci	r21, 0x00	; 0
 666:	28 f0       	brcs	.+10     	; 0x672 <strncat+0x1c>
 668:	01 90       	ld	r0, Z+
 66a:	00 20       	and	r0, r0
 66c:	0d 92       	st	X+, r0
 66e:	c9 f7       	brne	.-14     	; 0x662 <strncat+0xc>
 670:	08 95       	ret
 672:	1c 92       	st	X, r1
 674:	08 95       	ret

00000676 <__mulhi_const_10>:
 676:	7a e0       	ldi	r23, 0x0A	; 10
 678:	97 9f       	mul	r25, r23
 67a:	90 2d       	mov	r25, r0
 67c:	87 9f       	mul	r24, r23
 67e:	80 2d       	mov	r24, r0
 680:	91 0d       	add	r25, r1
 682:	11 24       	eor	r1, r1
 684:	08 95       	ret

00000686 <sprintf>:
 686:	ae e0       	ldi	r26, 0x0E	; 14
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e9 e4       	ldi	r30, 0x49	; 73
 68c:	f3 e0       	ldi	r31, 0x03	; 3
 68e:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__prologue_saves__+0x1c>
 692:	0d 89       	ldd	r16, Y+21	; 0x15
 694:	1e 89       	ldd	r17, Y+22	; 0x16
 696:	86 e0       	ldi	r24, 0x06	; 6
 698:	8c 83       	std	Y+4, r24	; 0x04
 69a:	1a 83       	std	Y+2, r17	; 0x02
 69c:	09 83       	std	Y+1, r16	; 0x01
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	9f e7       	ldi	r25, 0x7F	; 127
 6a2:	9e 83       	std	Y+6, r25	; 0x06
 6a4:	8d 83       	std	Y+5, r24	; 0x05
 6a6:	ae 01       	movw	r20, r28
 6a8:	47 5e       	subi	r20, 0xE7	; 231
 6aa:	5f 4f       	sbci	r21, 0xFF	; 255
 6ac:	ce 01       	movw	r24, r28
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	6f 89       	ldd	r22, Y+23	; 0x17
 6b2:	78 8d       	ldd	r23, Y+24	; 0x18
 6b4:	0e 94 65 03 	call	0x6ca	; 0x6ca <vfprintf>
 6b8:	ef 81       	ldd	r30, Y+7	; 0x07
 6ba:	f8 85       	ldd	r31, Y+8	; 0x08
 6bc:	e0 0f       	add	r30, r16
 6be:	f1 1f       	adc	r31, r17
 6c0:	10 82       	st	Z, r1
 6c2:	2e 96       	adiw	r28, 0x0e	; 14
 6c4:	e4 e0       	ldi	r30, 0x04	; 4
 6c6:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__epilogue_restores__+0x1c>

000006ca <vfprintf>:
 6ca:	ad e0       	ldi	r26, 0x0D	; 13
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	eb e6       	ldi	r30, 0x6B	; 107
 6d0:	f3 e0       	ldi	r31, 0x03	; 3
 6d2:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__prologue_saves__>
 6d6:	3c 01       	movw	r6, r24
 6d8:	7d 87       	std	Y+13, r23	; 0x0d
 6da:	6c 87       	std	Y+12, r22	; 0x0c
 6dc:	5a 01       	movw	r10, r20
 6de:	fc 01       	movw	r30, r24
 6e0:	17 82       	std	Z+7, r1	; 0x07
 6e2:	16 82       	std	Z+6, r1	; 0x06
 6e4:	83 81       	ldd	r24, Z+3	; 0x03
 6e6:	81 ff       	sbrs	r24, 1
 6e8:	c8 c1       	rjmp	.+912    	; 0xa7a <__stack+0x21b>
 6ea:	2e 01       	movw	r4, r28
 6ec:	08 94       	sec
 6ee:	41 1c       	adc	r4, r1
 6f0:	51 1c       	adc	r5, r1
 6f2:	f3 01       	movw	r30, r6
 6f4:	93 81       	ldd	r25, Z+3	; 0x03
 6f6:	ec 85       	ldd	r30, Y+12	; 0x0c
 6f8:	fd 85       	ldd	r31, Y+13	; 0x0d
 6fa:	93 fd       	sbrc	r25, 3
 6fc:	85 91       	lpm	r24, Z+
 6fe:	93 ff       	sbrs	r25, 3
 700:	81 91       	ld	r24, Z+
 702:	fd 87       	std	Y+13, r31	; 0x0d
 704:	ec 87       	std	Y+12, r30	; 0x0c
 706:	88 23       	and	r24, r24
 708:	09 f4       	brne	.+2      	; 0x70c <vfprintf+0x42>
 70a:	b3 c1       	rjmp	.+870    	; 0xa72 <__stack+0x213>
 70c:	85 32       	cpi	r24, 0x25	; 37
 70e:	41 f4       	brne	.+16     	; 0x720 <vfprintf+0x56>
 710:	93 fd       	sbrc	r25, 3
 712:	85 91       	lpm	r24, Z+
 714:	93 ff       	sbrs	r25, 3
 716:	81 91       	ld	r24, Z+
 718:	fd 87       	std	Y+13, r31	; 0x0d
 71a:	ec 87       	std	Y+12, r30	; 0x0c
 71c:	85 32       	cpi	r24, 0x25	; 37
 71e:	29 f4       	brne	.+10     	; 0x72a <vfprintf+0x60>
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	b3 01       	movw	r22, r6
 724:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 728:	e4 cf       	rjmp	.-56     	; 0x6f2 <vfprintf+0x28>
 72a:	ff 24       	eor	r15, r15
 72c:	ee 24       	eor	r14, r14
 72e:	10 e0       	ldi	r17, 0x00	; 0
 730:	10 32       	cpi	r17, 0x20	; 32
 732:	b0 f4       	brcc	.+44     	; 0x760 <vfprintf+0x96>
 734:	8b 32       	cpi	r24, 0x2B	; 43
 736:	69 f0       	breq	.+26     	; 0x752 <vfprintf+0x88>
 738:	8c 32       	cpi	r24, 0x2C	; 44
 73a:	28 f4       	brcc	.+10     	; 0x746 <vfprintf+0x7c>
 73c:	80 32       	cpi	r24, 0x20	; 32
 73e:	51 f0       	breq	.+20     	; 0x754 <vfprintf+0x8a>
 740:	83 32       	cpi	r24, 0x23	; 35
 742:	71 f4       	brne	.+28     	; 0x760 <vfprintf+0x96>
 744:	0b c0       	rjmp	.+22     	; 0x75c <vfprintf+0x92>
 746:	8d 32       	cpi	r24, 0x2D	; 45
 748:	39 f0       	breq	.+14     	; 0x758 <vfprintf+0x8e>
 74a:	80 33       	cpi	r24, 0x30	; 48
 74c:	49 f4       	brne	.+18     	; 0x760 <vfprintf+0x96>
 74e:	11 60       	ori	r17, 0x01	; 1
 750:	2c c0       	rjmp	.+88     	; 0x7aa <vfprintf+0xe0>
 752:	12 60       	ori	r17, 0x02	; 2
 754:	14 60       	ori	r17, 0x04	; 4
 756:	29 c0       	rjmp	.+82     	; 0x7aa <vfprintf+0xe0>
 758:	18 60       	ori	r17, 0x08	; 8
 75a:	27 c0       	rjmp	.+78     	; 0x7aa <vfprintf+0xe0>
 75c:	10 61       	ori	r17, 0x10	; 16
 75e:	25 c0       	rjmp	.+74     	; 0x7aa <vfprintf+0xe0>
 760:	17 fd       	sbrc	r17, 7
 762:	2e c0       	rjmp	.+92     	; 0x7c0 <vfprintf+0xf6>
 764:	28 2f       	mov	r18, r24
 766:	20 53       	subi	r18, 0x30	; 48
 768:	2a 30       	cpi	r18, 0x0A	; 10
 76a:	98 f4       	brcc	.+38     	; 0x792 <vfprintf+0xc8>
 76c:	16 ff       	sbrs	r17, 6
 76e:	08 c0       	rjmp	.+16     	; 0x780 <vfprintf+0xb6>
 770:	8f 2d       	mov	r24, r15
 772:	88 0f       	add	r24, r24
 774:	f8 2e       	mov	r15, r24
 776:	ff 0c       	add	r15, r15
 778:	ff 0c       	add	r15, r15
 77a:	f8 0e       	add	r15, r24
 77c:	f2 0e       	add	r15, r18
 77e:	15 c0       	rjmp	.+42     	; 0x7aa <vfprintf+0xe0>
 780:	8e 2d       	mov	r24, r14
 782:	88 0f       	add	r24, r24
 784:	e8 2e       	mov	r14, r24
 786:	ee 0c       	add	r14, r14
 788:	ee 0c       	add	r14, r14
 78a:	e8 0e       	add	r14, r24
 78c:	e2 0e       	add	r14, r18
 78e:	10 62       	ori	r17, 0x20	; 32
 790:	0c c0       	rjmp	.+24     	; 0x7aa <vfprintf+0xe0>
 792:	8e 32       	cpi	r24, 0x2E	; 46
 794:	21 f4       	brne	.+8      	; 0x79e <vfprintf+0xd4>
 796:	16 fd       	sbrc	r17, 6
 798:	6c c1       	rjmp	.+728    	; 0xa72 <__stack+0x213>
 79a:	10 64       	ori	r17, 0x40	; 64
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <vfprintf+0xe0>
 79e:	8c 36       	cpi	r24, 0x6C	; 108
 7a0:	11 f4       	brne	.+4      	; 0x7a6 <vfprintf+0xdc>
 7a2:	10 68       	ori	r17, 0x80	; 128
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <vfprintf+0xe0>
 7a6:	88 36       	cpi	r24, 0x68	; 104
 7a8:	59 f4       	brne	.+22     	; 0x7c0 <vfprintf+0xf6>
 7aa:	ec 85       	ldd	r30, Y+12	; 0x0c
 7ac:	fd 85       	ldd	r31, Y+13	; 0x0d
 7ae:	93 fd       	sbrc	r25, 3
 7b0:	85 91       	lpm	r24, Z+
 7b2:	93 ff       	sbrs	r25, 3
 7b4:	81 91       	ld	r24, Z+
 7b6:	fd 87       	std	Y+13, r31	; 0x0d
 7b8:	ec 87       	std	Y+12, r30	; 0x0c
 7ba:	88 23       	and	r24, r24
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <vfprintf+0xf6>
 7be:	b8 cf       	rjmp	.-144    	; 0x730 <vfprintf+0x66>
 7c0:	98 2f       	mov	r25, r24
 7c2:	95 54       	subi	r25, 0x45	; 69
 7c4:	93 30       	cpi	r25, 0x03	; 3
 7c6:	18 f0       	brcs	.+6      	; 0x7ce <vfprintf+0x104>
 7c8:	90 52       	subi	r25, 0x20	; 32
 7ca:	93 30       	cpi	r25, 0x03	; 3
 7cc:	38 f4       	brcc	.+14     	; 0x7dc <vfprintf+0x112>
 7ce:	24 e0       	ldi	r18, 0x04	; 4
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	a2 0e       	add	r10, r18
 7d4:	b3 1e       	adc	r11, r19
 7d6:	3f e3       	ldi	r19, 0x3F	; 63
 7d8:	39 83       	std	Y+1, r19	; 0x01
 7da:	0f c0       	rjmp	.+30     	; 0x7fa <vfprintf+0x130>
 7dc:	83 36       	cpi	r24, 0x63	; 99
 7de:	31 f0       	breq	.+12     	; 0x7ec <vfprintf+0x122>
 7e0:	83 37       	cpi	r24, 0x73	; 115
 7e2:	81 f0       	breq	.+32     	; 0x804 <vfprintf+0x13a>
 7e4:	83 35       	cpi	r24, 0x53	; 83
 7e6:	09 f0       	breq	.+2      	; 0x7ea <vfprintf+0x120>
 7e8:	5a c0       	rjmp	.+180    	; 0x89e <__stack+0x3f>
 7ea:	22 c0       	rjmp	.+68     	; 0x830 <vfprintf+0x166>
 7ec:	f5 01       	movw	r30, r10
 7ee:	80 81       	ld	r24, Z
 7f0:	89 83       	std	Y+1, r24	; 0x01
 7f2:	22 e0       	ldi	r18, 0x02	; 2
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	a2 0e       	add	r10, r18
 7f8:	b3 1e       	adc	r11, r19
 7fa:	21 e0       	ldi	r18, 0x01	; 1
 7fc:	c2 2e       	mov	r12, r18
 7fe:	d1 2c       	mov	r13, r1
 800:	42 01       	movw	r8, r4
 802:	14 c0       	rjmp	.+40     	; 0x82c <vfprintf+0x162>
 804:	92 e0       	ldi	r25, 0x02	; 2
 806:	29 2e       	mov	r2, r25
 808:	31 2c       	mov	r3, r1
 80a:	2a 0c       	add	r2, r10
 80c:	3b 1c       	adc	r3, r11
 80e:	f5 01       	movw	r30, r10
 810:	80 80       	ld	r8, Z
 812:	91 80       	ldd	r9, Z+1	; 0x01
 814:	16 ff       	sbrs	r17, 6
 816:	03 c0       	rjmp	.+6      	; 0x81e <vfprintf+0x154>
 818:	6f 2d       	mov	r22, r15
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <vfprintf+0x158>
 81e:	6f ef       	ldi	r22, 0xFF	; 255
 820:	7f ef       	ldi	r23, 0xFF	; 255
 822:	c4 01       	movw	r24, r8
 824:	0e 94 4e 05 	call	0xa9c	; 0xa9c <strnlen>
 828:	6c 01       	movw	r12, r24
 82a:	51 01       	movw	r10, r2
 82c:	1f 77       	andi	r17, 0x7F	; 127
 82e:	15 c0       	rjmp	.+42     	; 0x85a <vfprintf+0x190>
 830:	82 e0       	ldi	r24, 0x02	; 2
 832:	28 2e       	mov	r2, r24
 834:	31 2c       	mov	r3, r1
 836:	2a 0c       	add	r2, r10
 838:	3b 1c       	adc	r3, r11
 83a:	f5 01       	movw	r30, r10
 83c:	80 80       	ld	r8, Z
 83e:	91 80       	ldd	r9, Z+1	; 0x01
 840:	16 ff       	sbrs	r17, 6
 842:	03 c0       	rjmp	.+6      	; 0x84a <vfprintf+0x180>
 844:	6f 2d       	mov	r22, r15
 846:	70 e0       	ldi	r23, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0x184>
 84a:	6f ef       	ldi	r22, 0xFF	; 255
 84c:	7f ef       	ldi	r23, 0xFF	; 255
 84e:	c4 01       	movw	r24, r8
 850:	0e 94 43 05 	call	0xa86	; 0xa86 <strnlen_P>
 854:	6c 01       	movw	r12, r24
 856:	10 68       	ori	r17, 0x80	; 128
 858:	51 01       	movw	r10, r2
 85a:	13 fd       	sbrc	r17, 3
 85c:	1c c0       	rjmp	.+56     	; 0x896 <__stack+0x37>
 85e:	06 c0       	rjmp	.+12     	; 0x86c <__stack+0xd>
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	b3 01       	movw	r22, r6
 866:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 86a:	ea 94       	dec	r14
 86c:	8e 2d       	mov	r24, r14
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	c8 16       	cp	r12, r24
 872:	d9 06       	cpc	r13, r25
 874:	a8 f3       	brcs	.-22     	; 0x860 <__stack+0x1>
 876:	0f c0       	rjmp	.+30     	; 0x896 <__stack+0x37>
 878:	f4 01       	movw	r30, r8
 87a:	17 fd       	sbrc	r17, 7
 87c:	85 91       	lpm	r24, Z+
 87e:	17 ff       	sbrs	r17, 7
 880:	81 91       	ld	r24, Z+
 882:	4f 01       	movw	r8, r30
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	b3 01       	movw	r22, r6
 888:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 88c:	e1 10       	cpse	r14, r1
 88e:	ea 94       	dec	r14
 890:	08 94       	sec
 892:	c1 08       	sbc	r12, r1
 894:	d1 08       	sbc	r13, r1
 896:	c1 14       	cp	r12, r1
 898:	d1 04       	cpc	r13, r1
 89a:	71 f7       	brne	.-36     	; 0x878 <__stack+0x19>
 89c:	e7 c0       	rjmp	.+462    	; 0xa6c <__stack+0x20d>
 89e:	84 36       	cpi	r24, 0x64	; 100
 8a0:	11 f0       	breq	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	89 36       	cpi	r24, 0x69	; 105
 8a4:	51 f5       	brne	.+84     	; 0x8fa <__stack+0x9b>
 8a6:	f5 01       	movw	r30, r10
 8a8:	17 ff       	sbrs	r17, 7
 8aa:	07 c0       	rjmp	.+14     	; 0x8ba <__stack+0x5b>
 8ac:	80 81       	ld	r24, Z
 8ae:	91 81       	ldd	r25, Z+1	; 0x01
 8b0:	a2 81       	ldd	r26, Z+2	; 0x02
 8b2:	b3 81       	ldd	r27, Z+3	; 0x03
 8b4:	24 e0       	ldi	r18, 0x04	; 4
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__stack+0x6b>
 8ba:	80 81       	ld	r24, Z
 8bc:	91 81       	ldd	r25, Z+1	; 0x01
 8be:	aa 27       	eor	r26, r26
 8c0:	97 fd       	sbrc	r25, 7
 8c2:	a0 95       	com	r26
 8c4:	ba 2f       	mov	r27, r26
 8c6:	22 e0       	ldi	r18, 0x02	; 2
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	a2 0e       	add	r10, r18
 8cc:	b3 1e       	adc	r11, r19
 8ce:	01 2f       	mov	r16, r17
 8d0:	0f 76       	andi	r16, 0x6F	; 111
 8d2:	b7 ff       	sbrs	r27, 7
 8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <__stack+0x87>
 8d6:	b0 95       	com	r27
 8d8:	a0 95       	com	r26
 8da:	90 95       	com	r25
 8dc:	81 95       	neg	r24
 8de:	9f 4f       	sbci	r25, 0xFF	; 255
 8e0:	af 4f       	sbci	r26, 0xFF	; 255
 8e2:	bf 4f       	sbci	r27, 0xFF	; 255
 8e4:	00 68       	ori	r16, 0x80	; 128
 8e6:	bc 01       	movw	r22, r24
 8e8:	cd 01       	movw	r24, r26
 8ea:	a2 01       	movw	r20, r4
 8ec:	2a e0       	ldi	r18, 0x0A	; 10
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 8f4:	d8 2e       	mov	r13, r24
 8f6:	d4 18       	sub	r13, r4
 8f8:	3f c0       	rjmp	.+126    	; 0x978 <__stack+0x119>
 8fa:	85 37       	cpi	r24, 0x75	; 117
 8fc:	21 f4       	brne	.+8      	; 0x906 <__stack+0xa7>
 8fe:	1f 7e       	andi	r17, 0xEF	; 239
 900:	2a e0       	ldi	r18, 0x0A	; 10
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	20 c0       	rjmp	.+64     	; 0x946 <__stack+0xe7>
 906:	19 7f       	andi	r17, 0xF9	; 249
 908:	8f 36       	cpi	r24, 0x6F	; 111
 90a:	a9 f0       	breq	.+42     	; 0x936 <__stack+0xd7>
 90c:	80 37       	cpi	r24, 0x70	; 112
 90e:	20 f4       	brcc	.+8      	; 0x918 <__stack+0xb9>
 910:	88 35       	cpi	r24, 0x58	; 88
 912:	09 f0       	breq	.+2      	; 0x916 <__stack+0xb7>
 914:	ae c0       	rjmp	.+348    	; 0xa72 <__stack+0x213>
 916:	0b c0       	rjmp	.+22     	; 0x92e <__stack+0xcf>
 918:	80 37       	cpi	r24, 0x70	; 112
 91a:	21 f0       	breq	.+8      	; 0x924 <__stack+0xc5>
 91c:	88 37       	cpi	r24, 0x78	; 120
 91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0xc3>
 920:	a8 c0       	rjmp	.+336    	; 0xa72 <__stack+0x213>
 922:	01 c0       	rjmp	.+2      	; 0x926 <__stack+0xc7>
 924:	10 61       	ori	r17, 0x10	; 16
 926:	14 ff       	sbrs	r17, 4
 928:	09 c0       	rjmp	.+18     	; 0x93c <__stack+0xdd>
 92a:	14 60       	ori	r17, 0x04	; 4
 92c:	07 c0       	rjmp	.+14     	; 0x93c <__stack+0xdd>
 92e:	14 ff       	sbrs	r17, 4
 930:	08 c0       	rjmp	.+16     	; 0x942 <__stack+0xe3>
 932:	16 60       	ori	r17, 0x06	; 6
 934:	06 c0       	rjmp	.+12     	; 0x942 <__stack+0xe3>
 936:	28 e0       	ldi	r18, 0x08	; 8
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	05 c0       	rjmp	.+10     	; 0x946 <__stack+0xe7>
 93c:	20 e1       	ldi	r18, 0x10	; 16
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0xe7>
 942:	20 e1       	ldi	r18, 0x10	; 16
 944:	32 e0       	ldi	r19, 0x02	; 2
 946:	f5 01       	movw	r30, r10
 948:	17 ff       	sbrs	r17, 7
 94a:	07 c0       	rjmp	.+14     	; 0x95a <__stack+0xfb>
 94c:	60 81       	ld	r22, Z
 94e:	71 81       	ldd	r23, Z+1	; 0x01
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	93 81       	ldd	r25, Z+3	; 0x03
 954:	44 e0       	ldi	r20, 0x04	; 4
 956:	50 e0       	ldi	r21, 0x00	; 0
 958:	06 c0       	rjmp	.+12     	; 0x966 <__stack+0x107>
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	42 e0       	ldi	r20, 0x02	; 2
 964:	50 e0       	ldi	r21, 0x00	; 0
 966:	a4 0e       	add	r10, r20
 968:	b5 1e       	adc	r11, r21
 96a:	a2 01       	movw	r20, r4
 96c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 970:	d8 2e       	mov	r13, r24
 972:	d4 18       	sub	r13, r4
 974:	01 2f       	mov	r16, r17
 976:	0f 77       	andi	r16, 0x7F	; 127
 978:	06 ff       	sbrs	r16, 6
 97a:	09 c0       	rjmp	.+18     	; 0x98e <__stack+0x12f>
 97c:	0e 7f       	andi	r16, 0xFE	; 254
 97e:	df 14       	cp	r13, r15
 980:	30 f4       	brcc	.+12     	; 0x98e <__stack+0x12f>
 982:	04 ff       	sbrs	r16, 4
 984:	06 c0       	rjmp	.+12     	; 0x992 <__stack+0x133>
 986:	02 fd       	sbrc	r16, 2
 988:	04 c0       	rjmp	.+8      	; 0x992 <__stack+0x133>
 98a:	0f 7e       	andi	r16, 0xEF	; 239
 98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x133>
 98e:	1d 2d       	mov	r17, r13
 990:	01 c0       	rjmp	.+2      	; 0x994 <__stack+0x135>
 992:	1f 2d       	mov	r17, r15
 994:	80 2f       	mov	r24, r16
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	04 ff       	sbrs	r16, 4
 99a:	0c c0       	rjmp	.+24     	; 0x9b4 <__stack+0x155>
 99c:	fe 01       	movw	r30, r28
 99e:	ed 0d       	add	r30, r13
 9a0:	f1 1d       	adc	r31, r1
 9a2:	20 81       	ld	r18, Z
 9a4:	20 33       	cpi	r18, 0x30	; 48
 9a6:	11 f4       	brne	.+4      	; 0x9ac <__stack+0x14d>
 9a8:	09 7e       	andi	r16, 0xE9	; 233
 9aa:	09 c0       	rjmp	.+18     	; 0x9be <__stack+0x15f>
 9ac:	02 ff       	sbrs	r16, 2
 9ae:	06 c0       	rjmp	.+12     	; 0x9bc <__stack+0x15d>
 9b0:	1e 5f       	subi	r17, 0xFE	; 254
 9b2:	05 c0       	rjmp	.+10     	; 0x9be <__stack+0x15f>
 9b4:	86 78       	andi	r24, 0x86	; 134
 9b6:	90 70       	andi	r25, 0x00	; 0
 9b8:	00 97       	sbiw	r24, 0x00	; 0
 9ba:	09 f0       	breq	.+2      	; 0x9be <__stack+0x15f>
 9bc:	1f 5f       	subi	r17, 0xFF	; 255
 9be:	80 2e       	mov	r8, r16
 9c0:	99 24       	eor	r9, r9
 9c2:	03 fd       	sbrc	r16, 3
 9c4:	12 c0       	rjmp	.+36     	; 0x9ea <__stack+0x18b>
 9c6:	00 ff       	sbrs	r16, 0
 9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <__stack+0x185>
 9ca:	fd 2c       	mov	r15, r13
 9cc:	1e 15       	cp	r17, r14
 9ce:	50 f4       	brcc	.+20     	; 0x9e4 <__stack+0x185>
 9d0:	fe 0c       	add	r15, r14
 9d2:	f1 1a       	sub	r15, r17
 9d4:	1e 2d       	mov	r17, r14
 9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <__stack+0x185>
 9d8:	80 e2       	ldi	r24, 0x20	; 32
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	b3 01       	movw	r22, r6
 9de:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 9e2:	1f 5f       	subi	r17, 0xFF	; 255
 9e4:	1e 15       	cp	r17, r14
 9e6:	c0 f3       	brcs	.-16     	; 0x9d8 <__stack+0x179>
 9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__stack+0x193>
 9ea:	1e 15       	cp	r17, r14
 9ec:	10 f4       	brcc	.+4      	; 0x9f2 <__stack+0x193>
 9ee:	e1 1a       	sub	r14, r17
 9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <__stack+0x195>
 9f2:	ee 24       	eor	r14, r14
 9f4:	84 fe       	sbrs	r8, 4
 9f6:	0f c0       	rjmp	.+30     	; 0xa16 <__stack+0x1b7>
 9f8:	80 e3       	ldi	r24, 0x30	; 48
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	b3 01       	movw	r22, r6
 9fe:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 a02:	82 fe       	sbrs	r8, 2
 a04:	1f c0       	rjmp	.+62     	; 0xa44 <__stack+0x1e5>
 a06:	81 fe       	sbrs	r8, 1
 a08:	03 c0       	rjmp	.+6      	; 0xa10 <__stack+0x1b1>
 a0a:	88 e5       	ldi	r24, 0x58	; 88
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	10 c0       	rjmp	.+32     	; 0xa30 <__stack+0x1d1>
 a10:	88 e7       	ldi	r24, 0x78	; 120
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0d c0       	rjmp	.+26     	; 0xa30 <__stack+0x1d1>
 a16:	c4 01       	movw	r24, r8
 a18:	86 78       	andi	r24, 0x86	; 134
 a1a:	90 70       	andi	r25, 0x00	; 0
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	91 f0       	breq	.+36     	; 0xa44 <__stack+0x1e5>
 a20:	81 fc       	sbrc	r8, 1
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <__stack+0x1c9>
 a24:	80 e2       	ldi	r24, 0x20	; 32
 a26:	01 c0       	rjmp	.+2      	; 0xa2a <__stack+0x1cb>
 a28:	8b e2       	ldi	r24, 0x2B	; 43
 a2a:	07 fd       	sbrc	r16, 7
 a2c:	8d e2       	ldi	r24, 0x2D	; 45
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	b3 01       	movw	r22, r6
 a32:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 a36:	06 c0       	rjmp	.+12     	; 0xa44 <__stack+0x1e5>
 a38:	80 e3       	ldi	r24, 0x30	; 48
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	b3 01       	movw	r22, r6
 a3e:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 a42:	fa 94       	dec	r15
 a44:	df 14       	cp	r13, r15
 a46:	c0 f3       	brcs	.-16     	; 0xa38 <__stack+0x1d9>
 a48:	da 94       	dec	r13
 a4a:	f2 01       	movw	r30, r4
 a4c:	ed 0d       	add	r30, r13
 a4e:	f1 1d       	adc	r31, r1
 a50:	80 81       	ld	r24, Z
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	b3 01       	movw	r22, r6
 a56:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 a5a:	dd 20       	and	r13, r13
 a5c:	a9 f7       	brne	.-22     	; 0xa48 <__stack+0x1e9>
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <__stack+0x20d>
 a60:	80 e2       	ldi	r24, 0x20	; 32
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	b3 01       	movw	r22, r6
 a66:	0e 94 59 05 	call	0xab2	; 0xab2 <fputc>
 a6a:	ea 94       	dec	r14
 a6c:	ee 20       	and	r14, r14
 a6e:	c1 f7       	brne	.-16     	; 0xa60 <__stack+0x201>
 a70:	40 ce       	rjmp	.-896    	; 0x6f2 <vfprintf+0x28>
 a72:	f3 01       	movw	r30, r6
 a74:	86 81       	ldd	r24, Z+6	; 0x06
 a76:	97 81       	ldd	r25, Z+7	; 0x07
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <__stack+0x21f>
 a7a:	8f ef       	ldi	r24, 0xFF	; 255
 a7c:	9f ef       	ldi	r25, 0xFF	; 255
 a7e:	2d 96       	adiw	r28, 0x0d	; 13
 a80:	e2 e1       	ldi	r30, 0x12	; 18
 a82:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__epilogue_restores__>

00000a86 <strnlen_P>:
 a86:	fc 01       	movw	r30, r24
 a88:	05 90       	lpm	r0, Z+
 a8a:	61 50       	subi	r22, 0x01	; 1
 a8c:	70 40       	sbci	r23, 0x00	; 0
 a8e:	01 10       	cpse	r0, r1
 a90:	d8 f7       	brcc	.-10     	; 0xa88 <strnlen_P+0x2>
 a92:	80 95       	com	r24
 a94:	90 95       	com	r25
 a96:	8e 0f       	add	r24, r30
 a98:	9f 1f       	adc	r25, r31
 a9a:	08 95       	ret

00000a9c <strnlen>:
 a9c:	fc 01       	movw	r30, r24
 a9e:	61 50       	subi	r22, 0x01	; 1
 aa0:	70 40       	sbci	r23, 0x00	; 0
 aa2:	01 90       	ld	r0, Z+
 aa4:	01 10       	cpse	r0, r1
 aa6:	d8 f7       	brcc	.-10     	; 0xa9e <strnlen+0x2>
 aa8:	80 95       	com	r24
 aaa:	90 95       	com	r25
 aac:	8e 0f       	add	r24, r30
 aae:	9f 1f       	adc	r25, r31
 ab0:	08 95       	ret

00000ab2 <fputc>:
 ab2:	0f 93       	push	r16
 ab4:	1f 93       	push	r17
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	8c 01       	movw	r16, r24
 abc:	eb 01       	movw	r28, r22
 abe:	8b 81       	ldd	r24, Y+3	; 0x03
 ac0:	81 ff       	sbrs	r24, 1
 ac2:	1b c0       	rjmp	.+54     	; 0xafa <fputc+0x48>
 ac4:	82 ff       	sbrs	r24, 2
 ac6:	0d c0       	rjmp	.+26     	; 0xae2 <fputc+0x30>
 ac8:	2e 81       	ldd	r18, Y+6	; 0x06
 aca:	3f 81       	ldd	r19, Y+7	; 0x07
 acc:	8c 81       	ldd	r24, Y+4	; 0x04
 ace:	9d 81       	ldd	r25, Y+5	; 0x05
 ad0:	28 17       	cp	r18, r24
 ad2:	39 07       	cpc	r19, r25
 ad4:	64 f4       	brge	.+24     	; 0xaee <fputc+0x3c>
 ad6:	e8 81       	ld	r30, Y
 ad8:	f9 81       	ldd	r31, Y+1	; 0x01
 ada:	01 93       	st	Z+, r16
 adc:	f9 83       	std	Y+1, r31	; 0x01
 ade:	e8 83       	st	Y, r30
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <fputc+0x3c>
 ae2:	e8 85       	ldd	r30, Y+8	; 0x08
 ae4:	f9 85       	ldd	r31, Y+9	; 0x09
 ae6:	80 2f       	mov	r24, r16
 ae8:	09 95       	icall
 aea:	00 97       	sbiw	r24, 0x00	; 0
 aec:	31 f4       	brne	.+12     	; 0xafa <fputc+0x48>
 aee:	8e 81       	ldd	r24, Y+6	; 0x06
 af0:	9f 81       	ldd	r25, Y+7	; 0x07
 af2:	01 96       	adiw	r24, 0x01	; 1
 af4:	9f 83       	std	Y+7, r25	; 0x07
 af6:	8e 83       	std	Y+6, r24	; 0x06
 af8:	02 c0       	rjmp	.+4      	; 0xafe <fputc+0x4c>
 afa:	0f ef       	ldi	r16, 0xFF	; 255
 afc:	1f ef       	ldi	r17, 0xFF	; 255
 afe:	c8 01       	movw	r24, r16
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	08 95       	ret

00000b0a <__ultoa_invert>:
 b0a:	fa 01       	movw	r30, r20
 b0c:	aa 27       	eor	r26, r26
 b0e:	28 30       	cpi	r18, 0x08	; 8
 b10:	51 f1       	breq	.+84     	; 0xb66 <__ultoa_invert+0x5c>
 b12:	20 31       	cpi	r18, 0x10	; 16
 b14:	81 f1       	breq	.+96     	; 0xb76 <__ultoa_invert+0x6c>
 b16:	e8 94       	clt
 b18:	6f 93       	push	r22
 b1a:	6e 7f       	andi	r22, 0xFE	; 254
 b1c:	6e 5f       	subi	r22, 0xFE	; 254
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	af 4f       	sbci	r26, 0xFF	; 255
 b26:	b1 e0       	ldi	r27, 0x01	; 1
 b28:	3e d0       	rcall	.+124    	; 0xba6 <__ultoa_invert+0x9c>
 b2a:	b4 e0       	ldi	r27, 0x04	; 4
 b2c:	3c d0       	rcall	.+120    	; 0xba6 <__ultoa_invert+0x9c>
 b2e:	67 0f       	add	r22, r23
 b30:	78 1f       	adc	r23, r24
 b32:	89 1f       	adc	r24, r25
 b34:	9a 1f       	adc	r25, r26
 b36:	a1 1d       	adc	r26, r1
 b38:	68 0f       	add	r22, r24
 b3a:	79 1f       	adc	r23, r25
 b3c:	8a 1f       	adc	r24, r26
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	6a 0f       	add	r22, r26
 b44:	71 1d       	adc	r23, r1
 b46:	81 1d       	adc	r24, r1
 b48:	91 1d       	adc	r25, r1
 b4a:	a1 1d       	adc	r26, r1
 b4c:	20 d0       	rcall	.+64     	; 0xb8e <__ultoa_invert+0x84>
 b4e:	09 f4       	brne	.+2      	; 0xb52 <__ultoa_invert+0x48>
 b50:	68 94       	set
 b52:	3f 91       	pop	r19
 b54:	2a e0       	ldi	r18, 0x0A	; 10
 b56:	26 9f       	mul	r18, r22
 b58:	11 24       	eor	r1, r1
 b5a:	30 19       	sub	r19, r0
 b5c:	30 5d       	subi	r19, 0xD0	; 208
 b5e:	31 93       	st	Z+, r19
 b60:	de f6       	brtc	.-74     	; 0xb18 <__ultoa_invert+0xe>
 b62:	cf 01       	movw	r24, r30
 b64:	08 95       	ret
 b66:	46 2f       	mov	r20, r22
 b68:	47 70       	andi	r20, 0x07	; 7
 b6a:	40 5d       	subi	r20, 0xD0	; 208
 b6c:	41 93       	st	Z+, r20
 b6e:	b3 e0       	ldi	r27, 0x03	; 3
 b70:	0f d0       	rcall	.+30     	; 0xb90 <__ultoa_invert+0x86>
 b72:	c9 f7       	brne	.-14     	; 0xb66 <__ultoa_invert+0x5c>
 b74:	f6 cf       	rjmp	.-20     	; 0xb62 <__ultoa_invert+0x58>
 b76:	46 2f       	mov	r20, r22
 b78:	4f 70       	andi	r20, 0x0F	; 15
 b7a:	40 5d       	subi	r20, 0xD0	; 208
 b7c:	4a 33       	cpi	r20, 0x3A	; 58
 b7e:	18 f0       	brcs	.+6      	; 0xb86 <__ultoa_invert+0x7c>
 b80:	49 5d       	subi	r20, 0xD9	; 217
 b82:	31 fd       	sbrc	r19, 1
 b84:	40 52       	subi	r20, 0x20	; 32
 b86:	41 93       	st	Z+, r20
 b88:	02 d0       	rcall	.+4      	; 0xb8e <__ultoa_invert+0x84>
 b8a:	a9 f7       	brne	.-22     	; 0xb76 <__ultoa_invert+0x6c>
 b8c:	ea cf       	rjmp	.-44     	; 0xb62 <__ultoa_invert+0x58>
 b8e:	b4 e0       	ldi	r27, 0x04	; 4
 b90:	a6 95       	lsr	r26
 b92:	97 95       	ror	r25
 b94:	87 95       	ror	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0x86>
 b9e:	00 97       	sbiw	r24, 0x00	; 0
 ba0:	61 05       	cpc	r22, r1
 ba2:	71 05       	cpc	r23, r1
 ba4:	08 95       	ret
 ba6:	9b 01       	movw	r18, r22
 ba8:	ac 01       	movw	r20, r24
 baa:	0a 2e       	mov	r0, r26
 bac:	06 94       	lsr	r0
 bae:	57 95       	ror	r21
 bb0:	47 95       	ror	r20
 bb2:	37 95       	ror	r19
 bb4:	27 95       	ror	r18
 bb6:	ba 95       	dec	r27
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__ultoa_invert+0xa2>
 bba:	62 0f       	add	r22, r18
 bbc:	73 1f       	adc	r23, r19
 bbe:	84 1f       	adc	r24, r20
 bc0:	95 1f       	adc	r25, r21
 bc2:	a0 1d       	adc	r26, r0
 bc4:	08 95       	ret

00000bc6 <__prologue_saves__>:
 bc6:	2f 92       	push	r2
 bc8:	3f 92       	push	r3
 bca:	4f 92       	push	r4
 bcc:	5f 92       	push	r5
 bce:	6f 92       	push	r6
 bd0:	7f 92       	push	r7
 bd2:	8f 92       	push	r8
 bd4:	9f 92       	push	r9
 bd6:	af 92       	push	r10
 bd8:	bf 92       	push	r11
 bda:	cf 92       	push	r12
 bdc:	df 92       	push	r13
 bde:	ef 92       	push	r14
 be0:	ff 92       	push	r15
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
 bee:	ca 1b       	sub	r28, r26
 bf0:	db 0b       	sbc	r29, r27
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	f8 94       	cli
 bf6:	de bf       	out	0x3e, r29	; 62
 bf8:	0f be       	out	0x3f, r0	; 63
 bfa:	cd bf       	out	0x3d, r28	; 61
 bfc:	09 94       	ijmp

00000bfe <__epilogue_restores__>:
 bfe:	2a 88       	ldd	r2, Y+18	; 0x12
 c00:	39 88       	ldd	r3, Y+17	; 0x11
 c02:	48 88       	ldd	r4, Y+16	; 0x10
 c04:	5f 84       	ldd	r5, Y+15	; 0x0f
 c06:	6e 84       	ldd	r6, Y+14	; 0x0e
 c08:	7d 84       	ldd	r7, Y+13	; 0x0d
 c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c10:	b9 84       	ldd	r11, Y+9	; 0x09
 c12:	c8 84       	ldd	r12, Y+8	; 0x08
 c14:	df 80       	ldd	r13, Y+7	; 0x07
 c16:	ee 80       	ldd	r14, Y+6	; 0x06
 c18:	fd 80       	ldd	r15, Y+5	; 0x05
 c1a:	0c 81       	ldd	r16, Y+4	; 0x04
 c1c:	1b 81       	ldd	r17, Y+3	; 0x03
 c1e:	aa 81       	ldd	r26, Y+2	; 0x02
 c20:	b9 81       	ldd	r27, Y+1	; 0x01
 c22:	ce 0f       	add	r28, r30
 c24:	d1 1d       	adc	r29, r1
 c26:	0f b6       	in	r0, 0x3f	; 63
 c28:	f8 94       	cli
 c2a:	de bf       	out	0x3e, r29	; 62
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	cd bf       	out	0x3d, r28	; 61
 c30:	ed 01       	movw	r28, r26
 c32:	08 95       	ret

00000c34 <_exit>:
 c34:	f8 94       	cli

00000c36 <__stop_program>:
 c36:	ff cf       	rjmp	.-2      	; 0xc36 <__stop_program>
