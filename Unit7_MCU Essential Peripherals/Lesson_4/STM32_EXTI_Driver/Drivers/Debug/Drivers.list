
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b98  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000cc8  08000cc8  00010cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d10  08000d10  00010d18  2**0
                  CONTENTS
  4 .ARM          00000000  08000d10  08000d10  00010d18  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d10  08000d18  00010d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d14  08000d14  00010d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000d18  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000d18  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d18  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003469  00000000  00000000  00010d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000087c  00000000  00000000  000141aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a3a  00000000  00000000  00014a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00015460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000022f5  00000000  00000000  00015768  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001ab3  00000000  00000000  00017a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009468  00000000  00000000  00019510  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022978  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000558  00000000  00000000  000229f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cb0 	.word	0x08000cb0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000cb0 	.word	0x08000cb0

08000170 <_delay_ms>:
#include "lcd.h"



void _delay_ms(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned i,j ;
	for(i=0; i<x; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <_delay_ms+0x26>
		for(j=0; j<255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <_delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <_delay_ms+0x14>
	for(i=0; i<x; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	68fa      	ldr	r2, [r7, #12]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <_delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_clear_screen>:


void LCD_clear_screen()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80001ac:	2001      	movs	r0, #1
 80001ae:	f000 f8ad 	bl	800030c <LCD_WRITE_COMMAND>
}
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
	...

080001b8 <LCD_INIT>:


void LCD_INIT()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	
	_delay_ms(20);
 80001bc:	2014      	movs	r0, #20
 80001be:	f7ff ffd7 	bl	8000170 <_delay_ms>

	// SET THE 3 CTRL PINS AS OUTPUT

	PinCfg.GPIO_PinNumber = RS_SWITCH ;
 80001c2:	4b18      	ldr	r3, [pc, #96]	; (8000224 <LCD_INIT+0x6c>)
 80001c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001c8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP ;
 80001ca:	4b16      	ldr	r3, [pc, #88]	; (8000224 <LCD_INIT+0x6c>)
 80001cc:	2204      	movs	r2, #4
 80001ce:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M ;
 80001d0:	4b14      	ldr	r3, [pc, #80]	; (8000224 <LCD_INIT+0x6c>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init_Port_Range(LCD_CTRL, &PinCfg,3);
 80001d6:	2203      	movs	r2, #3
 80001d8:	4912      	ldr	r1, [pc, #72]	; (8000224 <LCD_INIT+0x6c>)
 80001da:	4813      	ldr	r0, [pc, #76]	; (8000228 <LCD_INIT+0x70>)
 80001dc:	f000 fccc 	bl	8000b78 <MCAL_GPIO_Init_Port_Range>

	_delay_ms(15);
 80001e0:	200f      	movs	r0, #15
 80001e2:	f7ff ffc5 	bl	8000170 <_delay_ms>
	
	// SET THE 8 DATA PINS AS OUTPUT
	PinCfg.GPIO_PinNumber = GPIO_Pin_0 ;
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <LCD_INIT+0x6c>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <LCD_INIT+0x6c>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M ;
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <LCD_INIT+0x6c>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init_Port_Range(LCD_Port, &PinCfg,8);
 80001f8:	2208      	movs	r2, #8
 80001fa:	490a      	ldr	r1, [pc, #40]	; (8000224 <LCD_INIT+0x6c>)
 80001fc:	480a      	ldr	r0, [pc, #40]	; (8000228 <LCD_INIT+0x70>)
 80001fe:	f000 fcbb 	bl	8000b78 <MCAL_GPIO_Init_Port_Range>

	LCD_clear_screen();
 8000202:	f7ff ffd1 	bl	80001a8 <LCD_clear_screen>
	
	//#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000206:	2038      	movs	r0, #56	; 0x38
 8000208:	f000 f880 	bl	800030c <LCD_WRITE_COMMAND>
//	#ifdef FOUR_BIT_MODE
//	LCD_WRITE_COMMAND(0x02);
//	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
//	#endif
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800020c:	2006      	movs	r0, #6
 800020e:	f000 f87d 	bl	800030c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000212:	2080      	movs	r0, #128	; 0x80
 8000214:	f000 f87a 	bl	800030c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000218:	200f      	movs	r0, #15
 800021a:	f000 f877 	bl	800030c <LCD_WRITE_COMMAND>
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	2000001c 	.word	0x2000001c
 8000228:	40010800 	.word	0x40010800

0800022c <LCD_lcd_kick>:

void LCD_lcd_kick()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_Pin_Set);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000236:	4807      	ldr	r0, [pc, #28]	; (8000254 <LCD_lcd_kick+0x28>)
 8000238:	f000 fcf0 	bl	8000c1c <MCAL_GPIO_WritePin>
	_delay_ms(50);
 800023c:	2032      	movs	r0, #50	; 0x32
 800023e:	f7ff ff97 	bl	8000170 <_delay_ms>
 	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_Pin_Reset);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <LCD_lcd_kick+0x28>)
 800024a:	f000 fce7 	bl	8000c1c <MCAL_GPIO_WritePin>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40010800 	.word	0x40010800

08000258 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = GPIO_Pin_0 ;
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <LCD_check_lcd_isbusy+0x64>)
 800025e:	2201      	movs	r2, #1
 8000260:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Input_FLO ;
 8000262:	4b16      	ldr	r3, [pc, #88]	; (80002bc <LCD_check_lcd_isbusy+0x64>)
 8000264:	2201      	movs	r2, #1
 8000266:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init_Port_Range(LCD_Port,&PinCfg,8);
 8000268:	2208      	movs	r2, #8
 800026a:	4914      	ldr	r1, [pc, #80]	; (80002bc <LCD_check_lcd_isbusy+0x64>)
 800026c:	4814      	ldr	r0, [pc, #80]	; (80002c0 <LCD_check_lcd_isbusy+0x68>)
 800026e:	f000 fc83 	bl	8000b78 <MCAL_GPIO_Init_Port_Range>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_Pin_Set);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000278:	4811      	ldr	r0, [pc, #68]	; (80002c0 <LCD_check_lcd_isbusy+0x68>)
 800027a:	f000 fccf 	bl	8000c1c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_Pin_Reset);
 800027e:	2200      	movs	r2, #0
 8000280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000284:	480e      	ldr	r0, [pc, #56]	; (80002c0 <LCD_check_lcd_isbusy+0x68>)
 8000286:	f000 fcc9 	bl	8000c1c <MCAL_GPIO_WritePin>

	LCD_lcd_kick();
 800028a:	f7ff ffcf 	bl	800022c <LCD_lcd_kick>

	PinCfg.GPIO_PinNumber = GPIO_Pin_0 ;
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <LCD_check_lcd_isbusy+0x64>)
 8000290:	2201      	movs	r2, #1
 8000292:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <LCD_check_lcd_isbusy+0x64>)
 8000296:	2204      	movs	r2, #4
 8000298:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M ;
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <LCD_check_lcd_isbusy+0x64>)
 800029c:	2201      	movs	r2, #1
 800029e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init_Port_Range(LCD_Port,&PinCfg,8);
 80002a0:	2208      	movs	r2, #8
 80002a2:	4906      	ldr	r1, [pc, #24]	; (80002bc <LCD_check_lcd_isbusy+0x64>)
 80002a4:	4806      	ldr	r0, [pc, #24]	; (80002c0 <LCD_check_lcd_isbusy+0x68>)
 80002a6:	f000 fc67 	bl	8000b78 <MCAL_GPIO_Init_Port_Range>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_Pin_Reset);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <LCD_check_lcd_isbusy+0x68>)
 80002b2:	f000 fcb3 	bl	8000c1c <MCAL_GPIO_WritePin>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000001c 	.word	0x2000001c
 80002c0:	40010800 	.word	0x40010800

080002c4 <LCD_GOTO_XY>:


void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	460a      	mov	r2, r1
 80002ce:	71fb      	strb	r3, [r7, #7]
 80002d0:	4613      	mov	r3, r2
 80002d2:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d108      	bne.n	80002ec <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80002da:	79bb      	ldrb	r3, [r7, #6]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d805      	bhi.n	80002ec <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	3b80      	subs	r3, #128	; 0x80
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f810 	bl	800030c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d108      	bne.n	8000304 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80002f2:	79bb      	ldrb	r3, [r7, #6]
 80002f4:	2b0f      	cmp	r3, #15
 80002f6:	d805      	bhi.n	8000304 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	3b40      	subs	r3, #64	; 0x40
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f804 	bl	800030c <LCD_WRITE_COMMAND>
		}
	}
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
	//#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 8000316:	f7ff ff9f 	bl	8000258 <LCD_check_lcd_isbusy>
		MCAL_GPIO_WritePort(LCD_Port, command);
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	b29b      	uxth	r3, r3
 800031e:	4619      	mov	r1, r3
 8000320:	480b      	ldr	r0, [pc, #44]	; (8000350 <LCD_WRITE_COMMAND+0x44>)
 8000322:	f000 fc92 	bl	8000c4a <MCAL_GPIO_WritePort>

		MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_Pin_Reset);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032c:	4808      	ldr	r0, [pc, #32]	; (8000350 <LCD_WRITE_COMMAND+0x44>)
 800032e:	f000 fc75 	bl	8000c1c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_Pin_Reset);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <LCD_WRITE_COMMAND+0x44>)
 800033a:	f000 fc6f 	bl	8000c1c <MCAL_GPIO_WritePin>

		_delay_ms(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f7ff ff16 	bl	8000170 <_delay_ms>
		LCD_lcd_kick();
 8000344:	f7ff ff72 	bl	800022c <LCD_lcd_kick>
//		LCD_lcd_kick ();
//		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
//		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
//		LCD_lcd_kick();
//	#endif
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40010800 	.word	0x40010800

08000354 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
	//#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 800035e:	f7ff ff7b 	bl	8000258 <LCD_check_lcd_isbusy>
		MCAL_GPIO_WritePort(LCD_Port, character);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	b29b      	uxth	r3, r3
 8000366:	4619      	mov	r1, r3
 8000368:	480b      	ldr	r0, [pc, #44]	; (8000398 <LCD_WRITE_CHAR+0x44>)
 800036a:	f000 fc6e 	bl	8000c4a <MCAL_GPIO_WritePort>
		MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_Pin_Reset);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000374:	4808      	ldr	r0, [pc, #32]	; (8000398 <LCD_WRITE_CHAR+0x44>)
 8000376:	f000 fc51 	bl	8000c1c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_Pin_Set);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <LCD_WRITE_CHAR+0x44>)
 8000382:	f000 fc4b 	bl	8000c1c <MCAL_GPIO_WritePin>
		_delay_ms(1);
 8000386:	2001      	movs	r0, #1
 8000388:	f7ff fef2 	bl	8000170 <_delay_ms>
		LCD_lcd_kick();
 800038c:	f7ff ff4e 	bl	800022c <LCD_lcd_kick>
//		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
//		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
//		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
//		LCD_lcd_kick ();
//	#endif
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40010800 	.word	0x40010800

0800039c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	int count = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
	while (*string > 0)
 80003a8:	e01c      	b.n	80003e4 <LCD_WRITE_STRING+0x48>
	{
		count++;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	3301      	adds	r3, #1
 80003ae:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	607a      	str	r2, [r7, #4]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ffcb 	bl	8000354 <LCD_WRITE_CHAR>
		if (count == 16)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	2b10      	cmp	r3, #16
 80003c2:	d104      	bne.n	80003ce <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 80003c4:	2100      	movs	r1, #0
 80003c6:	2002      	movs	r0, #2
 80003c8:	f7ff ff7c 	bl	80002c4 <LCD_GOTO_XY>
 80003cc:	e00a      	b.n	80003e4 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	2b20      	cmp	r3, #32
 80003d2:	d107      	bne.n	80003e4 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 80003d4:	f7ff fee8 	bl	80001a8 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80003d8:	2100      	movs	r1, #0
 80003da:	2001      	movs	r0, #1
 80003dc:	f7ff ff72 	bl	80002c4 <LCD_GOTO_XY>
			count = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
	while (*string > 0)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d1de      	bne.n	80003aa <LCD_WRITE_STRING+0xe>
		}
	}
}
 80003ec:	bf00      	nop
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <clock_init>:

uint8_t IRQ_Flag ;


void clock_init()
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	//Init clock for GPIOA
	RCC_GPIOA_CLK_EN();
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <clock_init+0x30>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a09      	ldr	r2, [pc, #36]	; (8000424 <clock_init+0x30>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]

	//Init clock for GPIOB
	RCC_GPIOB_CLK_EN() ;
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <clock_init+0x30>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a06      	ldr	r2, [pc, #24]	; (8000424 <clock_init+0x30>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6193      	str	r3, [r2, #24]

	//Init clock for AFIO
	RCC_AFIO_CLK_EN();
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <clock_init+0x30>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a03      	ldr	r2, [pc, #12]	; (8000424 <clock_init+0x30>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6193      	str	r3, [r2, #24]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000

08000428 <delay>:


void delay(int x)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	unsigned i,j ;
	for(i=0; i<x; i++)
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e00b      	b.n	800044e <delay+0x26>
		for(j=0; j<255; j++);
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	e002      	b.n	8000442 <delay+0x1a>
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	3301      	adds	r3, #1
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	2bfe      	cmp	r3, #254	; 0xfe
 8000446:	d9f9      	bls.n	800043c <delay+0x14>
	for(i=0; i<x; i++)
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3301      	adds	r3, #1
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	429a      	cmp	r2, r3
 8000454:	d3ef      	bcc.n	8000436 <delay+0xe>
}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <EXTI9_Callback>:


void EXTI9_Callback(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	IRQ_Flag = 1 ;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <EXTI9_Callback+0x1c>)
 8000466:	2201      	movs	r2, #1
 8000468:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is Happened _|--");
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <EXTI9_Callback+0x20>)
 800046c:	f7ff ff96 	bl	800039c <LCD_WRITE_STRING>
	delay(1000);
 8000470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000474:	f7ff ffd8 	bl	8000428 <delay>
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000020 	.word	0x20000020
 8000480:	08000cc8 	.word	0x08000cc8

08000484 <main>:


int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0

	clock_init();
 800048a:	f7ff ffb3 	bl	80003f4 <clock_init>
	LCD_INIT();
 800048e:	f7ff fe93 	bl	80001b8 <LCD_INIT>
	LCD_clear_screen();
 8000492:	f7ff fe89 	bl	80001a8 <LCD_clear_screen>

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9 ;
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <main+0x4c>)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	ca07      	ldmia	r2, {r0, r1, r2}
 800049c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_Rising ;
 80004a0:	2300      	movs	r3, #0
 80004a2:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable	;
 80004a4:	2301      	movs	r3, #1
 80004a6:	747b      	strb	r3, [r7, #17]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback ;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <main+0x50>)
 80004aa:	617b      	str	r3, [r7, #20]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f9f2 	bl	8000898 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1 ;
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <main+0x54>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(IRQ_Flag)
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <main+0x54>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0fb      	beq.n	80004ba <main+0x36>
		{
		LCD_clear_screen();
 80004c2:	f7ff fe71 	bl	80001a8 <LCD_clear_screen>
		IRQ_Flag = 0 ;
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <main+0x54>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 80004cc:	e7f5      	b.n	80004ba <main+0x36>
 80004ce:	bf00      	nop
 80004d0:	08000ce4 	.word	0x08000ce4
 80004d4:	08000461 	.word	0x08000461
 80004d8:	20000020 	.word	0x20000020

080004dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050a:	f000 fbad 	bl	8000c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff ffb9 	bl	8000484 <main>

08000512 <LoopForever>:

LoopForever:
    b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   r0, =_estack
 8000514:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000520:	08000d18 	.word	0x08000d18
  ldr r2, =_sbss
 8000524:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000528:	20000064 	.word	0x20000064

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <Enable_NVIC>:
 *							Generic Functions
 * ========================================================================
*/

void Enable_NVIC ( uint16_t IRQ)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
	switch (IRQ) {
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d853      	bhi.n	80005e8 <Enable_NVIC+0xb8>
 8000540:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <Enable_NVIC+0x18>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	08000589 	.word	0x08000589
 800054c:	08000597 	.word	0x08000597
 8000550:	080005a5 	.word	0x080005a5
 8000554:	080005b3 	.word	0x080005b3
 8000558:	080005c1 	.word	0x080005c1
 800055c:	080005cd 	.word	0x080005cd
 8000560:	080005cd 	.word	0x080005cd
 8000564:	080005cd 	.word	0x080005cd
 8000568:	080005cd 	.word	0x080005cd
 800056c:	080005cd 	.word	0x080005cd
 8000570:	080005db 	.word	0x080005db
 8000574:	080005db 	.word	0x080005db
 8000578:	080005db 	.word	0x080005db
 800057c:	080005db 	.word	0x080005db
 8000580:	080005db 	.word	0x080005db
 8000584:	080005db 	.word	0x080005db
		case 0:
			NVIC_IRQ6_EXTI0_Enable ;
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <Enable_NVIC+0xc4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <Enable_NVIC+0xc4>)
 800058e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000592:	6013      	str	r3, [r2, #0]
			break;
 8000594:	e028      	b.n	80005e8 <Enable_NVIC+0xb8>
		case 1:
			NVIC_IRQ7_EXTI1_Enable ;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <Enable_NVIC+0xc4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <Enable_NVIC+0xc4>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	6013      	str	r3, [r2, #0]
			break;
 80005a2:	e021      	b.n	80005e8 <Enable_NVIC+0xb8>
		case 2:
			NVIC_IRQ8_EXTI2_Enable ;
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <Enable_NVIC+0xc4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <Enable_NVIC+0xc4>)
 80005aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ae:	6013      	str	r3, [r2, #0]
			break;
 80005b0:	e01a      	b.n	80005e8 <Enable_NVIC+0xb8>
		case 3:
			NVIC_IRQ9_EXTI3_Enable ;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <Enable_NVIC+0xc4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <Enable_NVIC+0xc4>)
 80005b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005bc:	6013      	str	r3, [r2, #0]
			break;
 80005be:	e013      	b.n	80005e8 <Enable_NVIC+0xb8>
		case 4:
			NVIC_IRQ10_EXTI4_Enable ;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <Enable_NVIC+0xc4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <Enable_NVIC+0xc4>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Enable ;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <Enable_NVIC+0xc4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <Enable_NVIC+0xc4>)
 80005d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005d6:	6013      	str	r3, [r2, #0]
			break;
 80005d8:	e006      	b.n	80005e8 <Enable_NVIC+0xb8>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Enable	;
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <Enable_NVIC+0xc8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <Enable_NVIC+0xc8>)
 80005e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e4:	6013      	str	r3, [r2, #0]
			break;
 80005e6:	bf00      	nop
	}
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e100 	.word	0xe000e100
 80005f8:	e000e104 	.word	0xe000e104

080005fc <Disable_NVIC>:

void Disable_NVIC ( uint16_t IRQ)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	switch (IRQ) {
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d853      	bhi.n	80006b4 <Disable_NVIC+0xb8>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <Disable_NVIC+0x18>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	08000655 	.word	0x08000655
 8000618:	08000663 	.word	0x08000663
 800061c:	08000671 	.word	0x08000671
 8000620:	0800067f 	.word	0x0800067f
 8000624:	0800068d 	.word	0x0800068d
 8000628:	08000699 	.word	0x08000699
 800062c:	08000699 	.word	0x08000699
 8000630:	08000699 	.word	0x08000699
 8000634:	08000699 	.word	0x08000699
 8000638:	08000699 	.word	0x08000699
 800063c:	080006a7 	.word	0x080006a7
 8000640:	080006a7 	.word	0x080006a7
 8000644:	080006a7 	.word	0x080006a7
 8000648:	080006a7 	.word	0x080006a7
 800064c:	080006a7 	.word	0x080006a7
 8000650:	080006a7 	.word	0x080006a7
		case 0:
			NVIC_IRQ6_EXTI0_Disable ;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <Disable_NVIC+0xc4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <Disable_NVIC+0xc4>)
 800065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065e:	6013      	str	r3, [r2, #0]
			break;
 8000660:	e028      	b.n	80006b4 <Disable_NVIC+0xb8>
		case 1:
			NVIC_IRQ7_EXTI1_Disable ;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <Disable_NVIC+0xc4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <Disable_NVIC+0xc4>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	6013      	str	r3, [r2, #0]
			break;
 800066e:	e021      	b.n	80006b4 <Disable_NVIC+0xb8>
		case 2:
			NVIC_IRQ8_EXTI2_Disable ;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <Disable_NVIC+0xc4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <Disable_NVIC+0xc4>)
 8000676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067a:	6013      	str	r3, [r2, #0]
			break;
 800067c:	e01a      	b.n	80006b4 <Disable_NVIC+0xb8>
		case 3:
			NVIC_IRQ9_EXTI3_Disable ;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <Disable_NVIC+0xc4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <Disable_NVIC+0xc4>)
 8000684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000688:	6013      	str	r3, [r2, #0]
			break;
 800068a:	e013      	b.n	80006b4 <Disable_NVIC+0xb8>
		case 4:
			NVIC_IRQ10_EXTI4_Disable ;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <Disable_NVIC+0xc4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <Disable_NVIC+0xc4>)
 8000692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000696:	6013      	str	r3, [r2, #0]
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable ;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <Disable_NVIC+0xc4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <Disable_NVIC+0xc4>)
 800069e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006a2:	6013      	str	r3, [r2, #0]
			break;
 80006a4:	e006      	b.n	80006b4 <Disable_NVIC+0xb8>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable	;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <Disable_NVIC+0xc8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <Disable_NVIC+0xc8>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6013      	str	r3, [r2, #0]
			break;
 80006b2:	bf00      	nop
	}
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e180 	.word	0xe000e180
 80006c4:	e000e184 	.word	0xe000e184

080006c8 <Update_EXTI>:



void Update_EXTI(EXTI_PinConfig_t * EXTI_Config)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF Input -> Floating INPUT
	GPIO_PinConfig_t PinCfg ;

	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	891b      	ldrh	r3, [r3, #8]
 80006d4:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_Mode = GPIO_Mode_AF_Input;
 80006d6:	2308      	movs	r3, #8
 80006d8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f107 0208 	add.w	r2, r7, #8
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f9c4 	bl	8000a72 <MCAL_GPIO_Init>
//	{
//		i++;
//	}


	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	089b      	lsrs	r3, r3, #2
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4 ;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	f003 0303 	and.w	r3, r3, #3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position) ;
 8000704:	4a5d      	ldr	r2, [pc, #372]	; (800087c <Update_EXTI+0x1b4>)
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	3302      	adds	r3, #2
 800070a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	210f      	movs	r1, #15
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	4958      	ldr	r1, [pc, #352]	; (800087c <Update_EXTI+0x1b4>)
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4002      	ands	r2, r0
 8000720:	3302      	adds	r3, #2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_Index] |=((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_Position) ;
 8000726:	4a55      	ldr	r2, [pc, #340]	; (800087c <Update_EXTI+0x1b4>)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3302      	adds	r3, #2
 800072c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4952      	ldr	r1, [pc, #328]	; (8000880 <Update_EXTI+0x1b8>)
 8000736:	428b      	cmp	r3, r1
 8000738:	d016      	beq.n	8000768 <Update_EXTI+0xa0>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4951      	ldr	r1, [pc, #324]	; (8000884 <Update_EXTI+0x1bc>)
 8000740:	428b      	cmp	r3, r1
 8000742:	d00f      	beq.n	8000764 <Update_EXTI+0x9c>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	494f      	ldr	r1, [pc, #316]	; (8000888 <Update_EXTI+0x1c0>)
 800074a:	428b      	cmp	r3, r1
 800074c:	d008      	beq.n	8000760 <Update_EXTI+0x98>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	494e      	ldr	r1, [pc, #312]	; (800088c <Update_EXTI+0x1c4>)
 8000754:	428b      	cmp	r3, r1
 8000756:	d101      	bne.n	800075c <Update_EXTI+0x94>
 8000758:	2303      	movs	r3, #3
 800075a:	e006      	b.n	800076a <Update_EXTI+0xa2>
 800075c:	2300      	movs	r3, #0
 800075e:	e004      	b.n	800076a <Update_EXTI+0xa2>
 8000760:	2302      	movs	r3, #2
 8000762:	e002      	b.n	800076a <Update_EXTI+0xa2>
 8000764:	2301      	movs	r3, #1
 8000766:	e000      	b.n	800076a <Update_EXTI+0xa2>
 8000768:	2300      	movs	r3, #0
 800076a:	7bb9      	ldrb	r1, [r7, #14]
 800076c:	408b      	lsls	r3, r1
 800076e:	4618      	mov	r0, r3
 8000770:	4942      	ldr	r1, [pc, #264]	; (800087c <Update_EXTI+0x1b4>)
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4302      	orrs	r2, r0
 8000776:	3302      	adds	r3, #2
 8000778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//===========================================================

	//3- Update Rising or Falling Register
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800077c:	4b44      	ldr	r3, [pc, #272]	; (8000890 <Update_EXTI+0x1c8>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	4611      	mov	r1, r2
 8000786:	2201      	movs	r2, #1
 8000788:	408a      	lsls	r2, r1
 800078a:	43d2      	mvns	r2, r2
 800078c:	4611      	mov	r1, r2
 800078e:	4a40      	ldr	r2, [pc, #256]	; (8000890 <Update_EXTI+0x1c8>)
 8000790:	400b      	ands	r3, r1
 8000792:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000794:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <Update_EXTI+0x1c8>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	8812      	ldrh	r2, [r2, #0]
 800079c:	4611      	mov	r1, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	408a      	lsls	r2, r1
 80007a2:	43d2      	mvns	r2, r2
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a3a      	ldr	r2, [pc, #232]	; (8000890 <Update_EXTI+0x1c8>)
 80007a8:	400b      	ands	r3, r1
 80007aa:	60d3      	str	r3, [r2, #12]

	switch(EXTI_Config->Trigger_Case)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7b1b      	ldrb	r3, [r3, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <Update_EXTI+0xf2>
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d00c      	beq.n	80007d2 <Update_EXTI+0x10a>
 80007b8:	e017      	b.n	80007ea <Update_EXTI+0x122>
	{
	case EXTI_Trigger_Rising :
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 80007ba:	4b35      	ldr	r3, [pc, #212]	; (8000890 <Update_EXTI+0x1c8>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	8812      	ldrh	r2, [r2, #0]
 80007c2:	4611      	mov	r1, r2
 80007c4:	2201      	movs	r2, #1
 80007c6:	408a      	lsls	r2, r1
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a31      	ldr	r2, [pc, #196]	; (8000890 <Update_EXTI+0x1c8>)
 80007cc:	430b      	orrs	r3, r1
 80007ce:	6093      	str	r3, [r2, #8]
		break ;
 80007d0:	e022      	b.n	8000818 <Update_EXTI+0x150>
	case EXTI_Trigger_Falling :
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <Update_EXTI+0x1c8>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	8812      	ldrh	r2, [r2, #0]
 80007da:	4611      	mov	r1, r2
 80007dc:	2201      	movs	r2, #1
 80007de:	408a      	lsls	r2, r1
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <Update_EXTI+0x1c8>)
 80007e4:	430b      	orrs	r3, r1
 80007e6:	60d3      	str	r3, [r2, #12]
		break ;
 80007e8:	e016      	b.n	8000818 <Update_EXTI+0x150>
	default :
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <Update_EXTI+0x1c8>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	8812      	ldrh	r2, [r2, #0]
 80007f2:	4611      	mov	r1, r2
 80007f4:	2201      	movs	r2, #1
 80007f6:	408a      	lsls	r2, r1
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a25      	ldr	r2, [pc, #148]	; (8000890 <Update_EXTI+0x1c8>)
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <Update_EXTI+0x1c8>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	8812      	ldrh	r2, [r2, #0]
 8000808:	4611      	mov	r1, r2
 800080a:	2201      	movs	r2, #1
 800080c:	408a      	lsls	r2, r1
 800080e:	4611      	mov	r1, r2
 8000810:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <Update_EXTI+0x1c8>)
 8000812:	430b      	orrs	r3, r1
 8000814:	60d3      	str	r3, [r2, #12]
		break ;
 8000816:	bf00      	nop

	//===========================================================

	//4- Update IRQ Handling CALLBACK

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <Update_EXTI+0x1cc>)
 8000824:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	//=============================================
	//5- Enable/Disable IRQ EXTI and NVIC

	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7b5b      	ldrb	r3, [r3, #13]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d110      	bne.n	8000852 <Update_EXTI+0x18a>
	{
		EXTI->IMR |=  (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <Update_EXTI+0x1c8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	8812      	ldrh	r2, [r2, #0]
 8000838:	4611      	mov	r1, r2
 800083a:	2201      	movs	r2, #1
 800083c:	408a      	lsls	r2, r1
 800083e:	4611      	mov	r1, r2
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <Update_EXTI+0x1c8>)
 8000842:	430b      	orrs	r3, r1
 8000844:	6013      	str	r3, [r2, #0]
		Enable_NVIC ( EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe70 	bl	8000530 <Enable_NVIC>
		Disable_NVIC ( EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	}


}
 8000850:	e010      	b.n	8000874 <Update_EXTI+0x1ac>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <Update_EXTI+0x1c8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	4611      	mov	r1, r2
 800085c:	2201      	movs	r2, #1
 800085e:	408a      	lsls	r2, r1
 8000860:	43d2      	mvns	r2, r2
 8000862:	4611      	mov	r1, r2
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <Update_EXTI+0x1c8>)
 8000866:	400b      	ands	r3, r1
 8000868:	6013      	str	r3, [r2, #0]
		Disable_NVIC ( EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fec4 	bl	80005fc <Disable_NVIC>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40010000 	.word	0x40010000
 8000880:	40010800 	.word	0x40010800
 8000884:	40010c00 	.word	0x40010c00
 8000888:	40011000 	.word	0x40011000
 800088c:	40011400 	.word	0x40011400
 8000890:	40010400 	.word	0x40010400
 8000894:	20000024 	.word	0x20000024

08000898 <MCAL_EXTI_GPIO_Init>:
 * 					but LQFP48 package has only GPIO A,B PART of C/D exported as external PINS from the MCU
 * 					-Also Mandatory to Enable RCC for AFIO and the corresponding GPIO
 */

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_Config)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

	Update_EXTI(EXTI_Config) ;
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff11 	bl	80006c8 <Update_EXTI>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <EXTI0_IRQHandler>:
 *==================		APIs Functions Definitions		=============
 * ========================================================================
*/

void EXTI0_IRQHandler (void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	//cleared by writing a 1 into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<0) ;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <EXTI0_IRQHandler+0x1c>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <EXTI0_IRQHandler+0x1c>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]();
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <EXTI0_IRQHandler+0x20>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4798      	blx	r3
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40010400 	.word	0x40010400
 80008d0:	20000024 	.word	0x20000024

080008d4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <EXTI1_IRQHandler+0x1c>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <EXTI1_IRQHandler+0x1c>)
 80008de:	f043 0302 	orr.w	r3, r3, #2
 80008e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <EXTI1_IRQHandler+0x20>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4798      	blx	r3
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010400 	.word	0x40010400
 80008f4:	20000024 	.word	0x20000024

080008f8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2) ;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <EXTI2_IRQHandler+0x1c>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <EXTI2_IRQHandler+0x1c>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <EXTI2_IRQHandler+0x20>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	4798      	blx	r3
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40010400 	.word	0x40010400
 8000918:	20000024 	.word	0x20000024

0800091c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3) ;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <EXTI3_IRQHandler+0x1c>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <EXTI3_IRQHandler+0x1c>)
 8000926:	f043 0308 	orr.w	r3, r3, #8
 800092a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <EXTI3_IRQHandler+0x20>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4798      	blx	r3
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010400 	.word	0x40010400
 800093c:	20000024 	.word	0x20000024

08000940 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4) ;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <EXTI4_IRQHandler+0x1c>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <EXTI4_IRQHandler+0x1c>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <EXTI4_IRQHandler+0x20>)
 8000952:	691b      	ldr	r3, [r3, #16]
 8000954:	4798      	blx	r3
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010400 	.word	0x40010400
 8000960:	20000024 	.word	0x20000024

08000964 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

	uint8_t i = 5 ;
 800096a:	2305      	movs	r3, #5
 800096c:	71fb      	strb	r3, [r7, #7]
	while(!(EXTI->PR &=1<<i))
 800096e:	e002      	b.n	8000976 <EXTI9_5_IRQHandler+0x12>
	{
		i++ ;
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3301      	adds	r3, #1
 8000974:	71fb      	strb	r3, [r7, #7]
	while(!(EXTI->PR &=1<<i))
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <EXTI9_5_IRQHandler+0x50>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <EXTI9_5_IRQHandler+0x50>)
 8000986:	400b      	ands	r3, r1
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f0      	beq.n	8000970 <EXTI9_5_IRQHandler+0xc>
	}
	EXTI->PR |= (1<<i);
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <EXTI9_5_IRQHandler+0x50>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	79fa      	ldrb	r2, [r7, #7]
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	4611      	mov	r1, r2
 800099c:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <EXTI9_5_IRQHandler+0x50>)
 800099e:	430b      	orrs	r3, r1
 80009a0:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[i]() ;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <EXTI9_5_IRQHandler+0x54>)
 80009a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009aa:	4798      	blx	r3

}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40010400 	.word	0x40010400
 80009b8:	20000024 	.word	0x20000024

080009bc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	uint8_t i = 10 ;
 80009c2:	230a      	movs	r3, #10
 80009c4:	71fb      	strb	r3, [r7, #7]
	while(!(EXTI->PR &=1<<i))
 80009c6:	e002      	b.n	80009ce <EXTI15_10_IRQHandler+0x12>
	{
		i++ ;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	3301      	adds	r3, #1
 80009cc:	71fb      	strb	r3, [r7, #7]
	while(!(EXTI->PR &=1<<i))
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <EXTI15_10_IRQHandler+0x50>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	2101      	movs	r1, #1
 80009d6:	fa01 f202 	lsl.w	r2, r1, r2
 80009da:	4611      	mov	r1, r2
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <EXTI15_10_IRQHandler+0x50>)
 80009de:	400b      	ands	r3, r1
 80009e0:	6153      	str	r3, [r2, #20]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0f0      	beq.n	80009c8 <EXTI15_10_IRQHandler+0xc>
	}
	EXTI->PR |= (1<<i);
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <EXTI15_10_IRQHandler+0x50>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	2101      	movs	r1, #1
 80009ee:	fa01 f202 	lsl.w	r2, r1, r2
 80009f2:	4611      	mov	r1, r2
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <EXTI15_10_IRQHandler+0x50>)
 80009f6:	430b      	orrs	r3, r1
 80009f8:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[i]() ;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <EXTI15_10_IRQHandler+0x54>)
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	4798      	blx	r3

}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40010400 	.word	0x40010400
 8000a10:	20000024 	.word	0x20000024

08000a14 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
	volatile uint8_t PinOrder = 0 ;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
	while(!(PinNumber&0x01))
 8000a22:	e007      	b.n	8000a34 <Get_CRLH_Position+0x20>
	{
		PinOrder ++ ;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	73fb      	strb	r3, [r7, #15]
		PinNumber >>= 1 ;
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	80fb      	strh	r3, [r7, #6]
	while(!(PinNumber&0x01))
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f2      	beq.n	8000a24 <Get_CRLH_Position+0x10>
	}

	PinNumber = PinOrder ;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t Position  = (PinNumber < 8)? PinNumber * 4 :(PinNumber - 8) * 4 ;
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d803      	bhi.n	8000a52 <Get_CRLH_Position+0x3e>
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	e006      	b.n	8000a60 <Get_CRLH_Position+0x4c>
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000a58:	3338      	adds	r3, #56	; 0x38
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	81bb      	strh	r3, [r7, #12]
	return Position ;
 8000a62:	89bb      	ldrh	r3, [r7, #12]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					but LQFP48 package has only GPIO A,B PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PinConfig_t *PinConfig)
{
 8000a72:	b590      	push	{r4, r7, lr}
 8000a74:	b085      	sub	sp, #20
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t *ConfigRegister= NULL ;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
	volatile uint8_t Pin_Config = 0 ;
 8000a80:	2300      	movs	r3, #0
 8000a82:	72fb      	strb	r3, [r7, #11]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_Pin_8 )? &GPIOx->CRL :&GPIOx->CRH ;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	d801      	bhi.n	8000a90 <MCAL_GPIO_Init+0x1e>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	e001      	b.n	8000a94 <MCAL_GPIO_Init+0x22>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3304      	adds	r3, #4
 8000a94:	60fb      	str	r3, [r7, #12]

	//clear CNF8[1:0] MODE8[1:0]

	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffba 	bl	8000a14 <Get_CRLH_Position>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	4093      	lsls	r3, r2
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (PinConfig->GPIO_Mode == GPIO_Mode_Output_OD || PinConfig->GPIO_Mode == GPIO_Mode_Output_PP || PinConfig->GPIO_Mode == GPIO_Mode_Output_AF_OD || PinConfig->GPIO_Mode == GPIO_Mode_Output_AF_PP)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	2b05      	cmp	r3, #5
 8000aba:	d00b      	beq.n	8000ad4 <MCAL_GPIO_Init+0x62>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	789b      	ldrb	r3, [r3, #2]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d007      	beq.n	8000ad4 <MCAL_GPIO_Init+0x62>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d003      	beq.n	8000ad4 <MCAL_GPIO_Init+0x62>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	789b      	ldrb	r3, [r3, #2]
 8000ad0:	2b06      	cmp	r3, #6
 8000ad2:	d10f      	bne.n	8000af4 <MCAL_GPIO_Init+0x82>
	{
		Pin_Config = ((((PinConfig->GPIO_Mode - 4) << 2 ) | (PinConfig->GPIO_Output_Speed))) & 0x0F ;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	3b04      	subs	r3, #4
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	b25a      	sxtb	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	78db      	ldrb	r3, [r3, #3]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	72fb      	strb	r3, [r7, #11]
 8000af2:	e02d      	b.n	8000b50 <MCAL_GPIO_Init+0xde>
	}
	//if Pin is input
	else
	{
		//if  analog mode of input floating
		if (PinConfig->GPIO_Mode == GPIO_Mode_Analog || PinConfig->GPIO_Mode == GPIO_Mode_Input_FLO) //if  analog mode of input floating
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <MCAL_GPIO_Init+0x92>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d108      	bne.n	8000b16 <MCAL_GPIO_Init+0xa4>
		{
			Pin_Config = ((((PinConfig->GPIO_Mode << 2 )) | 0x0) & 0x0F) ;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	72fb      	strb	r3, [r7, #11]
 8000b14:	e01c      	b.n	8000b50 <MCAL_GPIO_Init+0xde>
		}
		else if(PinConfig->GPIO_Mode == GPIO_Mode_AF_Input) //if mode is Alternative input it considered as input floating
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	789b      	ldrb	r3, [r3, #2]
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d102      	bne.n	8000b24 <MCAL_GPIO_Init+0xb2>
		{
			Pin_Config = ((((GPIO_Mode_Input_FLO << 2 )) | 0x0) & 0x0F) ;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	72fb      	strb	r3, [r7, #11]
 8000b22:	e015      	b.n	8000b50 <MCAL_GPIO_Init+0xde>
		}
		else //then mode is PP or PU
		{
			Pin_Config = ((((GPIO_Mode_Input_PU << 2 )) | 0x0) & 0x0F) ;
 8000b24:	2308      	movs	r3, #8
 8000b26:	72fb      	strb	r3, [r7, #11]
			if(PinConfig->GPIO_Mode == GPIO_Mode_Input_PU)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d107      	bne.n	8000b40 <MCAL_GPIO_Init+0xce>
			{
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber) ;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	8812      	ldrh	r2, [r2, #0]
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	e007      	b.n	8000b50 <MCAL_GPIO_Init+0xde>
			}
			else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	8812      	ldrh	r2, [r2, #0]
 8000b48:	43d2      	mvns	r2, r2
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//write on the CRL or CRH
	(*ConfigRegister) |= (Pin_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000b50:	7afb      	ldrb	r3, [r7, #11]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461c      	mov	r4, r3
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff5a 	bl	8000a14 <Get_CRLH_Position>
 8000b60:	4603      	mov	r3, r0
 8000b62:	fa04 f203 	lsl.w	r2, r4, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <MCAL_GPIO_Init_Port_Range>:




void MCAL_GPIO_Init_Port_Range(GPIO_TypeDef *GPIOx , GPIO_PinConfig_t *PinConfig, uint8_t PinCount)
{
 8000b78:	b5b0      	push	{r4, r5, r7, lr}
 8000b7a:	b090      	sub	sp, #64	; 0x40
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	71fb      	strb	r3, [r7, #7]
	GPIO_PinConfig_t PinCfg  = *PinConfig ;
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6018      	str	r0, [r3, #0]
	volatile uint8_t StartingPin = 0 ;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t i ;

	uint16_t PinsList[16] = {GPIO_Pin_0,GPIO_Pin_1,GPIO_Pin_2, GPIO_Pin_3,
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <MCAL_GPIO_Init_Port_Range+0xa0>)
 8000b98:	f107 0414 	add.w	r4, r7, #20
 8000b9c:	461d      	mov	r5, r3
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							GPIO_Pin_4,GPIO_Pin_5,GPIO_Pin_6, GPIO_Pin_7,
							GPIO_Pin_8,GPIO_Pin_9,GPIO_Pin_10, GPIO_Pin_11,
							GPIO_Pin_12,GPIO_Pin_13,GPIO_Pin_14,GPIO_Pin_15};


	uint16_t PinNumber = PinConfig->GPIO_PinNumber ;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	87bb      	strh	r3, [r7, #60]	; 0x3c
	while(!(PinNumber&0x01))
 8000bb0:	e009      	b.n	8000bc6 <MCAL_GPIO_Init_Port_Range+0x4e>
	{
		StartingPin++ ;
 8000bb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		PinNumber >>= 1 ;
 8000bc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000bc2:	085b      	lsrs	r3, r3, #1
 8000bc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
	while(!(PinNumber&0x01))
 8000bc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f0      	beq.n	8000bb2 <MCAL_GPIO_Init_Port_Range+0x3a>
	}

	for(i=StartingPin; PinCount>0; PinCount--)
 8000bd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000bd8:	e016      	b.n	8000c08 <MCAL_GPIO_Init_Port_Range+0x90>
	{
		PinCfg.GPIO_PinNumber = PinsList[i];
 8000bda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000be4:	4413      	add	r3, r2
 8000be6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000bea:	873b      	strh	r3, [r7, #56]	; 0x38
		MCAL_GPIO_Init(GPIOx, &PinCfg);
 8000bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f7ff ff3d 	bl	8000a72 <MCAL_GPIO_Init>
		i++ ;
 8000bf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(i=StartingPin; PinCount>0; PinCount--)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1e5      	bne.n	8000bda <MCAL_GPIO_Init_Port_Range+0x62>

	}

}
 8000c0e:	bf00      	nop
 8000c10:	3740      	adds	r7, #64	; 0x40
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bdb0      	pop	{r4, r5, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08000cf0 	.word	0x08000cf0

08000c1c <MCAL_GPIO_WritePin>:
 * @param [in] 		-PinNumber : to specify which pin to write the value on the selected port
 * @param [in] 		-PinValue  : value to be written on the specified pin
 * Note				-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t PinNumber , uint8_t PinValue)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
	if (PinValue != (uint8_t)GPIO_Pin_Reset)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <MCAL_GPIO_WritePin+0x1e>
	{
		//GPIOx->ODR |= PinNumber ;
		//or
		GPIOx->BSRR = PinNumber ;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
	{
		//GPIOx->ODR &= ~PinNumber;
		//or
		GPIOx->BRR = PinNumber ;
	}
}
 8000c38:	e002      	b.n	8000c40 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber ;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	615a      	str	r2, [r3, #20]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <MCAL_GPIO_WritePort>:
 * @param [in] 		- PortValue : value to be written on the specified port
 * @retval 			- none
 * Note				-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx , uint16_t PortValue)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)PortValue ;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
	...

08000c68 <__libc_init_array>:
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	4e0c      	ldr	r6, [pc, #48]	; (8000ca0 <__libc_init_array+0x38>)
 8000c6e:	4c0d      	ldr	r4, [pc, #52]	; (8000ca4 <__libc_init_array+0x3c>)
 8000c70:	1ba4      	subs	r4, r4, r6
 8000c72:	10a4      	asrs	r4, r4, #2
 8000c74:	42a5      	cmp	r5, r4
 8000c76:	d109      	bne.n	8000c8c <__libc_init_array+0x24>
 8000c78:	f000 f81a 	bl	8000cb0 <_init>
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	4e0a      	ldr	r6, [pc, #40]	; (8000ca8 <__libc_init_array+0x40>)
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <__libc_init_array+0x44>)
 8000c82:	1ba4      	subs	r4, r4, r6
 8000c84:	10a4      	asrs	r4, r4, #2
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	d105      	bne.n	8000c96 <__libc_init_array+0x2e>
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
 8000c8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c90:	4798      	blx	r3
 8000c92:	3501      	adds	r5, #1
 8000c94:	e7ee      	b.n	8000c74 <__libc_init_array+0xc>
 8000c96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c9a:	4798      	blx	r3
 8000c9c:	3501      	adds	r5, #1
 8000c9e:	e7f2      	b.n	8000c86 <__libc_init_array+0x1e>
 8000ca0:	08000d10 	.word	0x08000d10
 8000ca4:	08000d10 	.word	0x08000d10
 8000ca8:	08000d10 	.word	0x08000d10
 8000cac:	08000d14 	.word	0x08000d14

08000cb0 <_init>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	bf00      	nop
 8000cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb6:	bc08      	pop	{r3}
 8000cb8:	469e      	mov	lr, r3
 8000cba:	4770      	bx	lr

08000cbc <_fini>:
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	bf00      	nop
 8000cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc2:	bc08      	pop	{r3}
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	4770      	bx	lr
