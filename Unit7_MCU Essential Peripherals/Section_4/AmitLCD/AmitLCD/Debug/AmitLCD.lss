
AmitLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000020e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000009e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b0  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d4  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ce  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c9  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000177  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "lcd.h"
#define F_CPU 80000000UL

int main(void)
{
	LCD_INIT();
  92:	0e 94 99 00 	call	0x132	; 0x132 <LCD_INIT>
	LCD_WRITE_STRING("Learn In Depth");
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_WRITE_STRING>
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	08 95       	ret

000000a4 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  a4:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	83 ed       	ldi	r24, 0xD3	; 211
  a8:	90 e3       	ldi	r25, 0x30	; 48
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_lcd_kick+0x6>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_lcd_kick+0xc>
  b0:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  b2:	c3 98       	cbi	0x18, 3	; 24
}
  b4:	08 95       	ret

000000b6 <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  b6:	8a b3       	in	r24, 0x1a	; 26
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  bc:	c2 9a       	sbi	0x18, 2	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  be:	c1 98       	cbi	0x18, 1	; 24
	LCD_lcd_kick();
  c0:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	80 6f       	ori	r24, 0xF0	; 240
  c8:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  ca:	c2 98       	cbi	0x18, 2	; 24
	
}
  cc:	08 95       	ret

000000ce <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
		_delay_ms(1);
		LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
		LCD_check_lcd_isbusy();
  d2:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_check_lcd_isbusy>
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	9c 2f       	mov	r25, r28
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	89 2b       	or	r24, r25
  e0:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	89 7f       	andi	r24, 0xF9	; 249
  e6:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick ();
  e8:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
  ec:	8b b3       	in	r24, 0x1b	; 27
  ee:	c2 95       	swap	r28
  f0:	c0 7f       	andi	r28, 0xF0	; 240
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	c8 2b       	or	r28, r24
  f6:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	89 7f       	andi	r24, 0xF9	; 249
  fc:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_lcd_kick>
	#endif
}
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	39 f4       	brne	.+14     	; 0x118 <LCD_GOTO_XY+0x12>
	{
		if (position < 16 && position >= 0)
 10a:	60 31       	cpi	r22, 0x10	; 16
 10c:	68 f4       	brcc	.+26     	; 0x128 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 10e:	86 2f       	mov	r24, r22
 110:	80 58       	subi	r24, 0x80	; 128
 112:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
 116:	08 95       	ret
		}
	}
	if (line == 2)
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	31 f4       	brne	.+12     	; 0x128 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
 11c:	60 31       	cpi	r22, 0x10	; 16
 11e:	20 f4       	brcc	.+8      	; 0x128 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 120:	86 2f       	mov	r24, r22
 122:	80 54       	subi	r24, 0x40	; 64
 124:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
 128:	08 95       	ret

0000012a <LCD_clear_screen>:
 */ 

#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
}
 130:	08 95       	ret

00000132 <LCD_INIT>:
 132:	87 e8       	ldi	r24, 0x87	; 135
 134:	93 e1       	ldi	r25, 0x13	; 19
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_INIT+0x4>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_INIT+0xa>
 13c:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 13e:	87 b3       	in	r24, 0x17	; 23
 140:	8e 60       	ori	r24, 0x0E	; 14
 142:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 144:	88 b3       	in	r24, 0x18	; 24
 146:	81 7f       	andi	r24, 0xF1	; 241
 148:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	8a bb       	out	0x1a, r24	; 26
 14e:	85 ea       	ldi	r24, 0xA5	; 165
 150:	9e e0       	ldi	r25, 0x0E	; 14
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_INIT+0x20>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_INIT+0x26>
 158:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 15a:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
	#endif
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 176:	8f e0       	ldi	r24, 0x0F	; 15
 178:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
}
 17c:	08 95       	ret

0000017e <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
		LCD_CTRL |= (1 << RS_SWITCH);
		_delay_ms(1);
		LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 182:	8b b3       	in	r24, 0x1b	; 27
 184:	9c 2f       	mov	r25, r28
 186:	90 7f       	andi	r25, 0xF0	; 240
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	89 2b       	or	r24, r25
 18c:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 18e:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 190:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick();
 192:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 196:	8b b3       	in	r24, 0x1b	; 27
 198:	c2 95       	swap	r28
 19a:	c0 7f       	andi	r28, 0xF0	; 240
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	c8 2b       	or	r28, r24
 1a0:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 1a2:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 1a4:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick ();
 1a6:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_lcd_kick>
	#endif
}
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	int count = 0;
 1ba:	08 2f       	mov	r16, r24
 1bc:	19 2f       	mov	r17, r25
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if (count == 32)
		{
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
 1c2:	ee 24       	eor	r14, r14
 1c4:	ff 24       	eor	r15, r15
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 1c6:	15 c0       	rjmp	.+42     	; 0x1f2 <LCD_WRITE_STRING+0x44>
		count++;
 1c8:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 1ca:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_WRITE_CHAR>
		if (count == 16)
 1ce:	c0 31       	cpi	r28, 0x10	; 16
 1d0:	d1 05       	cpc	r29, r1
 1d2:	29 f4       	brne	.+10     	; 0x1de <LCD_WRITE_STRING+0x30>
		{
			LCD_GOTO_XY(2,0);
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GOTO_XY>
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <LCD_WRITE_STRING+0x44>
		}
		else if (count == 32)
 1de:	c0 32       	cpi	r28, 0x20	; 32
 1e0:	d1 05       	cpc	r29, r1
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <LCD_WRITE_STRING+0x44>
		{
			LCD_clear_screen();
 1e4:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GOTO_XY>
			count = 0;
 1f0:	e7 01       	movw	r28, r14
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 1f2:	f8 01       	movw	r30, r16
 1f4:	81 91       	ld	r24, Z+
 1f6:	8f 01       	movw	r16, r30
 1f8:	88 23       	and	r24, r24
 1fa:	31 f7       	brne	.-52     	; 0x1c8 <LCD_WRITE_STRING+0x1a>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
