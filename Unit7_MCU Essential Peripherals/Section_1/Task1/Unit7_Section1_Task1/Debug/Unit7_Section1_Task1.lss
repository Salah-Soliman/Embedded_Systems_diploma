
Unit7_Section1_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000120  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000430  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000133  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000358  00000000  00000000  00000ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014a  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017c  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  8a:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <IO_init>:
#define F_CPU 8000000UL

void IO_init(void)
{
	//Configure PortA as OutPut Port
	DDRA = 0xFF ;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	//Init PortA with Zeros
	PORTA = 0 ;
  96:	1b ba       	out	0x1b, r1	; 27
}
  98:	08 95       	ret

0000009a <main>:
int main(void)
{
	IO_init();
  9a:	0e 94 49 00 	call	0x92	; 0x92 <IO_init>
	int count = 0,Mutiplier=2,flag=1;
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	42 e0       	ldi	r20, 0x02	; 2
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
			count ++ ;
			Mutiplier*=2 ;
			_delay_ms(3000) ;
			if(count == 8)
			{
				flag = 0 ;
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	d0 e0       	ldi	r29, 0x00	; 0
			PORTA = Mutiplier-1;
			count -- ;
			_delay_ms(3000) ;
			if(count == -1)
			{
				flag = 1 ;
  ae:	e1 e0       	ldi	r30, 0x01	; 1
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	03 c0       	rjmp	.+6      	; 0xba <main+0x20>
			count ++ ;
			Mutiplier*=2 ;
			_delay_ms(3000) ;
			if(count == 8)
			{
				flag = 0 ;
  b4:	be 01       	movw	r22, r28
  b6:	01 c0       	rjmp	.+2      	; 0xba <main+0x20>
			PORTA = Mutiplier-1;
			count -- ;
			_delay_ms(3000) ;
			if(count == -1)
			{
				flag = 1 ;
  b8:	bf 01       	movw	r22, r30
{
	IO_init();
	int count = 0,Mutiplier=2,flag=1;
    while(1)
    {
		if(flag)
  ba:	61 15       	cp	r22, r1
  bc:	71 05       	cpc	r23, r1
  be:	a1 f0       	breq	.+40     	; 0xe8 <main+0x4e>
		{
			
			PORTA = Mutiplier-1;
  c0:	84 2f       	mov	r24, r20
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	8b bb       	out	0x1b, r24	; 27
			count ++ ;
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
			Mutiplier*=2 ;
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f eb       	ldi	r24, 0xBF	; 191
  d0:	97 e2       	ldi	r25, 0x27	; 39
  d2:	a9 e0       	ldi	r26, 0x09	; 9
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	a0 40       	sbci	r26, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x3a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x44>
  de:	00 00       	nop
			_delay_ms(3000) ;
			if(count == 8)
  e0:	28 30       	cpi	r18, 0x08	; 8
  e2:	31 05       	cpc	r19, r1
  e4:	51 f7       	brne	.-44     	; 0xba <main+0x20>
  e6:	e6 cf       	rjmp	.-52     	; 0xb4 <main+0x1a>
			}
		}

		else
		{
			Mutiplier/=2 ;
  e8:	ca 01       	movw	r24, r20
  ea:	99 23       	and	r25, r25
  ec:	0c f4       	brge	.+2      	; 0xf0 <main+0x56>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	ac 01       	movw	r20, r24
  f2:	55 95       	asr	r21
  f4:	47 95       	ror	r20
			PORTA = Mutiplier-1;
  f6:	84 2f       	mov	r24, r20
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	8b bb       	out	0x1b, r24	; 27
			count -- ;
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	8f eb       	ldi	r24, 0xBF	; 191
 102:	97 e2       	ldi	r25, 0x27	; 39
 104:	a9 e0       	ldi	r26, 0x09	; 9
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	a0 40       	sbci	r26, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x6c>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x76>
 110:	00 00       	nop
			_delay_ms(3000) ;
			if(count == -1)
 112:	9f ef       	ldi	r25, 0xFF	; 255
 114:	2f 3f       	cpi	r18, 0xFF	; 255
 116:	39 07       	cpc	r19, r25
 118:	81 f6       	brne	.-96     	; 0xba <main+0x20>
 11a:	ce cf       	rjmp	.-100    	; 0xb8 <main+0x1e>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
