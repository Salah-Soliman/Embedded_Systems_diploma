
Atmega32Interupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000980  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a8  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000148  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000136  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000129  00000000  00000000  00001552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_1>
   8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_2>
   c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 75 00 	call	0xea	; 0xea <main>
  8a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_init>:


void GPIO_init(void)
{
	//configure PORTD pins 2,3 and PORTD pin 2 as inputs for EXTI
	DDRB &= ~(1<<2);
  92:	ba 98       	cbi	0x17, 2	; 23
	DDRD &= ~(11<<2);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	83 7d       	andi	r24, 0xD3	; 211
  98:	81 bb       	out	0x11, r24	; 17
	
	DDRD |= (111 << 5) ; //configure PORTD pins 5,6,7 as output for Leds
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	80 6e       	ori	r24, 0xE0	; 224
  9e:	81 bb       	out	0x11, r24	; 17
}
  a0:	08 95       	ret

000000a2 <EXTI_init>:

void EXTI_init(void)
{
	//trigger EXTI 0 on both rising and falling edges
	INT_MCUCR |= (1<<0) ;
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	96 b7       	in	r25, 0x36	; 54
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	96 bf       	out	0x36, r25	; 54
  aa:	85 bf       	out	0x35, r24	; 53
	INT_MCUCR &= ~(1<<1) ;
  ac:	85 b7       	in	r24, 0x35	; 53
  ae:	96 b7       	in	r25, 0x36	; 54
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	96 bf       	out	0x36, r25	; 54
  b4:	85 bf       	out	0x35, r24	; 53
	
	INT_MCUCR |= (11<<2) ; //trigger EXTI 1 on rising edge
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	96 b7       	in	r25, 0x36	; 54
  ba:	8c 62       	ori	r24, 0x2C	; 44
  bc:	96 bf       	out	0x36, r25	; 54
  be:	85 bf       	out	0x35, r24	; 53
	INT_MCUCSR &=~(1<<6) ; //trigger EXTI 2 on falling edge
  c0:	84 b7       	in	r24, 0x34	; 52
  c2:	95 b7       	in	r25, 0x35	; 53
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	95 bf       	out	0x35, r25	; 53
  c8:	84 bf       	out	0x34, r24	; 52
	
	INT_GICR |= (111<<5); //Enable EXTI 0,1,2 Masks
  ca:	8b b7       	in	r24, 0x3b	; 59
  cc:	9c b7       	in	r25, 0x3c	; 60
  ce:	80 6e       	ori	r24, 0xE0	; 224
  d0:	9d 60       	ori	r25, 0x0D	; 13
  d2:	9c bf       	out	0x3c, r25	; 60
  d4:	8b bf       	out	0x3b, r24	; 59
	
	INT_SREG |= (1<<7) ; //Global interrupts Enable
  d6:	80 91 5f 00 	lds	r24, 0x005F
  da:	90 91 60 00 	lds	r25, 0x0060
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	90 93 60 00 	sts	0x0060, r25
  e4:	80 93 5f 00 	sts	0x005F, r24
}
  e8:	08 95       	ret

000000ea <main>:



int main(void)
{
	GPIO_init();
  ea:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_init>
	EXTI_init();
  ee:	0e 94 51 00 	call	0xa2	; 0xa2 <EXTI_init>
	
    while(1)
    {
		PORTD &=~(111<<5) ; //Turn off all leds
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	8f 71       	andi	r24, 0x1F	; 31
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <main+0x8>

000000fa <__vector_1>:
}



ISR(INT0_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
	PORTD |= (1<<5) ; //Turn On Led0
 10c:	95 9a       	sbi	0x12, 5	; 18
	GIFR |= (1<<6) ;  //Clear EXTI0  Pending Request Flag (write 1 to clear)
 10e:	8a b7       	in	r24, 0x3a	; 58
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8a bf       	out	0x3a, r24	; 58
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	99 e6       	ldi	r25, 0x69	; 105
 118:	a8 e1       	ldi	r26, 0x18	; 24
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	a0 40       	sbci	r26, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <__vector_1+0x20>
 122:	00 c0       	rjmp	.+0      	; 0x124 <__vector_1+0x2a>
 124:	00 00       	nop
	_delay_ms(1000);  //waiting 1 sec
}
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_2>:
ISR(INT1_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
	PORTD |= (1<<6) ; //Turn On Led1
 14a:	96 9a       	sbi	0x12, 6	; 18
	GIFR |= (1<<7) ;  //Clear EXTI1  Pending Request Flag (write 1 to clear)
 14c:	8a b7       	in	r24, 0x3a	; 58
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	8a bf       	out	0x3a, r24	; 58
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	99 e6       	ldi	r25, 0x69	; 105
 156:	a8 e1       	ldi	r26, 0x18	; 24
 158:	81 50       	subi	r24, 0x01	; 1
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <__vector_2+0x20>
 160:	00 c0       	rjmp	.+0      	; 0x162 <__vector_2+0x2a>
 162:	00 00       	nop
	_delay_ms(1000);  //waiting 1 sec
}	
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <__vector_3>:
ISR(INT2_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
	PORTB |= (1<<7) ;  //Turn On Led2
 188:	c7 9a       	sbi	0x18, 7	; 24
	GIFR |= (1<<5) ;   //Clear EXTI2  Pending Request Flag (write 1 to clear)
 18a:	8a b7       	in	r24, 0x3a	; 58
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	8a bf       	out	0x3a, r24	; 58
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	99 e6       	ldi	r25, 0x69	; 105
 194:	a8 e1       	ldi	r26, 0x18	; 24
 196:	81 50       	subi	r24, 0x01	; 1
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	a0 40       	sbci	r26, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <__vector_3+0x20>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <__vector_3+0x2a>
 1a0:	00 00       	nop
	_delay_ms(1000);   //waiting 1 sec
}
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
